<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端学习week1</title>
      <link href="/2019/05/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0week1/"/>
      <url>/2019/05/04/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0week1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>一些前端的基本概念，没什么卵用</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>常见浏览器内核</p><ul><li>webkit</li><li>blink</li><li>gecko</li><li>trigent</li></ul><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><ul><li><p>模拟信号  </p><p>连续的信号</p></li><li><p>数字信号</p><p>离散的信号</p></li></ul><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><ul><li><p>jpg，jpeg</p><ul><li>有损压缩，压缩率高</li><li>照片</li></ul></li><li><p>png (portable network graphic)</p><ul><li>无损压缩</li><li>适合有大块相同颜色区域的图像，不适合照片</li><li>支持透明(Alpha通道)</li></ul></li><li><p>gif</p><ul><li>只有256色(原图小于256色时是无损压缩)</li><li>支持透明，但只支持全透明和不透明</li></ul></li><li><p>bmp</p><ul><li>无压缩，无损</li><li>多种颜色数量的格式</li><li>体积大，不适合网页</li></ul></li><li><p>psd</p><p>Photoshop专用格式</p></li><li><p>webp</p><ul><li>google开发的格式</li><li>有损压缩</li><li>各方面强过jpg</li><li>适合移动端</li></ul></li></ul><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ul><li><p>GUI与CLI</p><ul><li>GUI - Graphics User Interface</li><li>CLI - Command Line Interface</li><li>两者区别只在于形式不一样</li></ul></li><li><p>概念</p><ul><li><p>prompt 命令 提示符</p></li><li><p>裸命令</p><p>例：pwd 显示当前工作目录</p></li><li><p>pipe</p><p>管道符，将前一个命令的Output作为下一个命令的Input</p><p>例如：xxx | grep abc  过滤出含abc的输出结果</p></li></ul></li></ul><h3 id="编码知识"><a href="#编码知识" class="headerlink" title="编码知识"></a>编码知识</h3><ul><li><p>ASCII表</p><p>记忆：10-换行 48-0 65-A 97-a</p></li><li><p>Unicode  通用字符集</p><ul><li>utf-8 针对Unicode的一种变长字符编码</li></ul></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h3><ul><li>树状(递归)结构</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li><p>语义化 secmentic</p><p>语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。</p><p>即：<strong>合适的内容用合适的标签</strong></p></li><li><p>事实上，即使是有些非自闭合标签（如p，li），在一些情况下也是可以省略结束标签的，<strong>而且，是完全符合html标准的</strong></p><p>参考</p><ul><li><a href="https://www.w3.org/TR/html-markup/p.html" target="_blank" rel="noopener">https://www.w3.org/TR/html-markup/p.html</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories</a></li></ul></li></ul><h3 id="缩进-indent"><a href="#缩进-indent" class="headerlink" title="缩进 indent"></a>缩进 indent</h3><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p>属性名大小写不敏感，属性值大小写敏感</p></li><li><p>当属性值没有空格和引号等特殊字符时，属性值<strong>完全可以</strong>不用引号包围</p></li><li><p>当属性值有复杂的引号时，考虑转义字符</p></li><li><p>一些通用/全局属性(Global Attributes)</p><ul><li><p>id</p></li><li><p>name 标签名，主要用再表单类标签</p></li><li><p>title</p></li><li><p>style 给标签内指定内联样式</p></li><li><p>class</p></li><li><p>data-*  </p><p>html5中新属性，储存页面的私有自定义数据，会被用户代理自动忽略</p><p>例：</p></li></ul></li></ul><p></p><p class="code-caption" data-lang data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code>&lt;li data-animal-type=&quot;鸟类&quot;&gt;喜鹊&lt;/li&gt;</code></pre><h3 id="html-entity-字符实体"><a href="#html-entity-字符实体" class="headerlink" title="html entity 字符实体"></a>html entity 字符实体</h3><p>输入符号时，可能会与标签混在一起</p><p>两种转义(escape)格式</p><ul><li>&entityName; </li><li>&#entityNumber;</li><li><p>参考</p><ul><li><a href="https://dev.w3.org/html5/html-author/charref" target="_blank" rel="noopener">https://dev.w3.org/html5/html-author/charref</a></li><li><a href="http://www.w3school.com.cn/html/html_entities.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/html/html_entities.asp</a></li><li><a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_entities.html</a></li></ul></li><li><p>空白字符忽略</p><ul><li><p>用户代理默认忽略文字间<strong>多余一个</strong>的空格，换行符全部忽略</p></li><li><p>可以用css改变忽略</p></li><li><p>可以用字符实体让空格不被忽略</p><p>例如<code>&amp;nbsp;</code>，但这不是真正的空格</p></li></ul></li></ul><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><ul><li><p>html</p><p>只能有一个</p></li><li><p>head</p><ul><li><p><a href="https://github.com/joshbuchea/HEAD" target="_blank" rel="noopener">https://github.com/joshbuchea/HEAD</a></p></li><li><p>head内的内容不会显示在页面上</p></li><li><p>meta 元信息</p></li><li><p>title标签</p><ul><li>仅纯文本</li><li>如果不出现在head内会自动移到head</li><li>出现多个的话仅第一个生效</li></ul></li><li><p>页面图标</p><p>也可以不用一个标签设置，浏览器会自动读取网站根目录下的favicon.ico这个文件</p></li></ul></li><li><p>body</p><ul><li>如果在body或者html标签的<strong>结束标签之后</strong>又出现了其它的标签，则之前的结束标签就会被认为无效，浏览器会自动添加结束标签</li></ul></li></ul><ul><li>base 基准<ul><li>在标签之前加载的标签不会使用这个基准地址</li><li>‘<base href="页面中所有相对路径的基准地址" target="全局设置页面中所有链接的打开位置">‘<ul><li>必须以<strong>/</strong>即目录结尾，否则会把最后一个/的位置作为基准路径</li><li>target属性<ul><li>_blank 新标签</li><li>_self  默认值</li><li>_parent 父窗体显示</li><li>_top 顶层窗体显示</li></ul></li></ul></li></ul></li></ul><ul><li><p>h1-h6</p><ul><li>一般页面不超过一个h1<ul><li>seo (Search Engine Optimism)</li></ul></li></ul></li><li><p>p</p></li><li><p>a</p><ul><li><p>语义是一个链接</p></li><li><p>绝对路径</p></li><li><p>相对路径</p></li><li><p>空的href连接到当前页面</p><ul><li><p>类似的，img标签的空src属性也连接到当前页面</p><p><a href="https://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/" target="_blank" rel="noopener">https://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/</a></p></li></ul></li><li><p>download 属性 html5</p><ul><li>表示点击链接将下载链接对应文件，而不是跳转，下载的文件以download属性的值来命名</li><li>只能下载自己网站的资源</li><li>这个属性能让点击下载完全由前端实现</li></ul></li></ul></li><li><p>img</p><ul><li>alt属性 alternate</li></ul></li><li><p>span 和 div</p><p>通用标签，是没有语义的标签</p></li></ul><h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><p>常用命令：</p><ul><li><p>git config</p></li><li><p>git init 初始化本地仓库</p></li><li><p>git status 当前仓库状态  -s紧凑显示</p></li><li><p>git add xx 将修改/新文件提交到stage区</p></li><li><p>git commit -m “提交信息” 提交暂存区文件</p></li><li><p>git diff  显示详细文件修改状态，-staged显示暂存区文件改动</p></li><li><p>git log</p></li><li><p>git merge</p></li><li><p>git clone [url]</p><p>git clone <a href="https://github.com/libgit2/libgit2" target="_blank" rel="noopener">https://github.com/libgit2/libgit2</a> mylibgit 可将本地仓库名改为mylibgit</p></li><li><p>git remote</p></li><li><p>git push/pull</p></li><li><p>git fetch</p></li><li><p>git checkout</p></li><li><p>git branch</p></li><li><p>https://<username>.github.io/可以访问到<username>.github.io这个仓库里的资源</username></username></p></li><li><p>https://<username>.github.io/&lt;repo_name&gt;可以访问到repo_name这个仓库里的资源</username></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> font-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建RSS自动推送服务</title>
      <link href="/2018/03/25/%E6%90%AD%E5%BB%BARSS%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/03/25/%E6%90%AD%E5%BB%BARSS%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>利用Google app engine搭建自动推送RSS至kindle的服务</p><a id="more"></a><p>原repo：<a href="https://github.com/cdhigh/KindleEar" target="_blank" rel="noopener">KindleEar</a></p><p>因为网络环境原因一直没有成功。心灰意冷下看到这篇文章：</p><p><a href="https://bookfere.com/post/19.html" target="_blank" rel="noopener">KindleEar 搭建教程：推送 RSS 订阅到 Kindle</a></p><p>记录非常详细，几乎涵盖了所有问题，故转载</p>]]></content>
      
      
      
        <tags>
            
            <tag> kindle </tag>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下配置st3+Texlive+sumartraPDF的LaTeX环境</title>
      <link href="/2017/05/11/win10%E4%B8%8B%E9%85%8D%E7%BD%AEst3-Texlive-sumartraPDF%E7%9A%84LaTeX%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/05/11/win10%E4%B8%8B%E9%85%8D%E7%BD%AEst3-Texlive-sumartraPDF%E7%9A%84LaTeX%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>sublime配置方便而Tex live相较Ctex更灵活且自定义程度高 sumatraPDF可配置为默认的pdf预览器，并内置了反向查找的功能，具体步骤略。</p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>在sublime中安装好LaTeXtools插件后，找出配置文件LaTeXTools.sublime-settings</li><li>将Tex live和sumatraPDF的安装路径添加环境变量后，找的settings中的texpath，distro和sumatra项按照提示修改，再找到builder项改为simple，即配置完成。</li><li>反向代理：打开sumartaPDf，在选项的对应处输入<code>&quot;C:\Program Files\Sublime Text 3\sublime_text.exe&quot; &quot;%f:%l&quot;</code> 并执行即可。</li><li>在编辑完文档后按ctrl+b即可保存并输出pdf。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt学习笔记</title>
      <link href="/2017/05/10/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/05/10/Qt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>想做一个GUI对验证码识别程序做同意的处理，又开了个新坑，并没有任何Qt的基础，Python相对C++比较简单，因此使用PyQt来做，本文为快速制作一个简陋的GUI程序的学习过程。</p><a id="more"></a><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>参见另一文中的末尾<a href="http://limbotech.top/2017/04/14/python-opencv/" target="_blank" rel="noopener">Windows下Pycharm+Anaconda+Opencv图像处理环境配置</a></p><h3 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h3><p>可以参考另一系列教程<a href="http://blog.csdn.net/a359680405/article/details/45096185" target="_blank" rel="noopener">PyQt5学习笔记01—-第一个窗口</a>已经写的非常详细了</p><p>设计结果：</p><p><img src="/assets/Blogimg/2017.5.11/1.png" alt></p><p>下面说说自己0基础学习时的问题：</p><ol><li><p>由QT Designer设计好的UI执行Pyuic生成的ui代码会覆盖之前的，所以我们需要创建一个新的主程序通过调用UI程序来实现代码与界面分离，在主程序中添加功能。</p></li><li><p>主程序中新建一个类例如：</p></li></ol><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="python">class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):    def __init__(self):        super(recognizer, self).__init__()        self.setupUi(self)</code></pre><p>   其中<code>def __init__(self)</code>为窗口初始化的部分，信号连接，字体等设置放在这里面</p><ol start="3"><li><p>自定义的槽函数也放置在class中</p></li><li><p>调用label来显示文字及图像信息</p></li></ol><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="python">self.label.XXXXXXXXX</code></pre><ol start="5"><li><p>可以设置全局变量来记录之前打开的文件路径，程序结果等。</p></li><li><p>使用<a href="https://anthony-tuininga.github.io/cx_Freeze/" target="_blank" rel="noopener">cxfreeze</a>来打包生成可执行文件(to be continued)</p></li><li><p><a href="https://anthony-tuininga.github.io/cx_Freeze/" target="_blank" rel="noopener">cxfreeze</a>打包会生成很多库文件，不方便使用，可用<a href="http://www.pyinstaller.org/" target="_blank" rel="noopener">pyinstaller</a>打包成单一可执行文件</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证码识别研究</title>
      <link href="/2017/04/18/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2017/04/18/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>验证码(CAPTCHA) 最早作为卡内基梅隆大学的一个科研项目，Yahoo! 是CAPTCHA 的第一个用户。CAPTCHA 是“Completely Automated Public Turing test to tell Computers and Humans Apart”(全自动区分计算机和人类的图灵测试)的缩写，是一种区分用户是人类还是计算机的公共自动程序。在一个验证码测试中，由计算机生成一个问题并评判用户的答案，这个问题必须只有人类才能解答。由于计算机无法解答，回答出该问题的用户就会被认为是人类  。CAPTCHA 在网络上的大规模使用起源于 1999-2000 年 Yahoo 网站的账号注册。目前大部分网站都引入了验证码机制来加强网络的安全验证。通过对验证码识别的研究，能够及时发现验证码存在的安全漏洞，对设计出更加安全的验证码有参考价值，对图像处理，模式识别等相关领域也具有重要意义。</p><a id="more"></a><h3 id="验证码识别的具体过程"><a href="#验证码识别的具体过程" class="headerlink" title="验证码识别的具体过程"></a>验证码识别的具体过程</h3><p>识别流程一般为：</p><p></p><p class="code-caption" data-lang="flow" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><div id="flowchart-0" class="flow-chart"></div><p>本课题主要介绍验证码识别中常用的数字图像处理技术，研究对象为卡提诺社区的验证码，给出算法流程和识别结果，并对结果进行分析。</p><h4 id="验证码示例及特点："><a href="#验证码示例及特点：" class="headerlink" title="验证码示例及特点："></a>验证码示例及特点：</h4><p>从原网页下载了一万张待标注的验证码：</p><p><img src="/assets/Blogimg/验证码识别技术研究/3731.png" alt><img src="/assets/Blogimg/验证码识别技术研究/3733.png" alt><img src="/assets/Blogimg/验证码识别技术研究/3734.png" alt><img src="/assets/Blogimg/验证码识别技术研究/3732.png" alt></p><p>由观察可得此类验证码的特点：</p><ol><li>每幅验证码字符由4位数字和英文字母组成，且字体种类不多</li><li>每个字符的颜色与背景的噪声颜色都不相同</li><li>字符没有粘连，便于字符分割</li></ol><p>由以上特点设计的识别流程如下：</p><p></p><p class="code-caption" data-lang="flow" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><div id="flowchart-1" class="flow-chart"></div><h4 id="识别流程"><a href="#识别流程" class="headerlink" title="识别流程"></a>识别流程</h4><p>根据设计好的识别方案，从之前下载的验证码中选取了200张作为实验数据及模式识别的样本，具体流程如下:</p><h5 id="颜色聚类"><a href="#颜色聚类" class="headerlink" title="颜色聚类"></a>颜色聚类</h5><p>验证码图像中字符间颜色不同且均匀，可通过颜色聚类的方法将字符分离。</p><p>主要使用K-means算法，原理：</p><p>从数据集合中选取K个点作为各簇的中心，计算集合中各元素到各簇心的距离，使距离最近的元素为一类，再计算各类的中心作为新的簇心，重复上述过程，直到簇心的位置不变。</p><ol><li><p>将获取的RGB图换值LAB空间，由于LAB空间色域广且各分量间联系较小，更适合颜色聚类。</p><p>RGB原图：</p><p><img src="/assets/Blogimg/验证码识别技术研究/图片1.png" alt></p><p>LAB空间：</p><p><img src="/assets/Blogimg/验证码识别技术研究/图片2.png" alt></p></li><li><p>将图像每个像素值的L,A,B三个分量为一组作为特征向量，用K-means进行颜色聚类，由于背景的噪声颜色较复杂，因此K值取的较大，取K = 40。</p><p>颜色聚类后(已按类标记)：</p><p><img src="/assets/Blogimg/验证码识别技术研究/图片3.png" alt></p></li></ol><h5 id="类图处理"><a href="#类图处理" class="headerlink" title="类图处理"></a>类图处理</h5><p>由于颜色聚类后得到的矩阵是对原图不同类的标记，因此将每一类的标记点置黑，其他点置白，可以得到K张类图，其中4张包含字符的类图，(K - 4)张包含各类的颜色的噪声图，省去了预处理中灰度化的步骤。</p><p>因为K张类图都有一定数量的像素数，且背景噪声中可能包含与待识别字符颜色相同的零星噪点，难以直接获得包含字符的类图。通过人工挑选出包含字符的类图，经过多次实验，字符的像素点数量大致在[70,500]区间。</p><p>对之前的K张类图做4邻域的连通域去噪，步骤：</p><p>扫描整张图像，将不同4邻域的连通域标记为不同数字，统计各连通域的像素点数，将小于70或大于500的连通域置白。</p><p>处理后得到的各类图像种类：空白的噪声图像，只包含字符的图像，包含与字符像素点数类似的噪声图像。</p><h5 id="投影分割"><a href="#投影分割" class="headerlink" title="投影分割"></a>投影分割</h5><p>经由上述步骤获得的图像，</p><p>人工选取包含字符的图像，经过多次实验，得到字符像素长度和高度的大致区间为[7,25],[8,28]。</p><p>计算每一列黑像素点的总数，形成竖直投影波形，根据投影波形的过零点确定图像像素区域的边界得到宽度；同理计算每行的黑点数，可得到像素区域高度。将在区间外的类图剔除，最后得到的即为原图中的四个字符图像，由字符最左端的像素位置可确定四个字符在原图中的顺序。</p><p>但也可能存在与待识别的字符像素数及长宽都类似的噪声，如下图所示：</p><p><img src="/assets/Blogimg/验证码识别技术研究/5.png" alt><img src="/assets/Blogimg/验证码识别技术研究/169.jpg" alt><img src="/assets/Blogimg/验证码识别技术研究/389.jpg" alt><img src="/assets/Blogimg/验证码识别技术研究/356.jpg" alt><img src="/assets/Blogimg/验证码识别技术研究/819.jpg" alt><img src="/assets/Blogimg/验证码识别技术研究/741.jpg" alt></p><h5 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h5><p>由于以上得到的各个字符大小不尽相同，为统一字符特征，将字符的大小已近邻插值的方式归一化至$28*28$的大小.</p><p>将作为实验数据的200个验证码分离出的字符手动分类，得到由24种字符组成的样本库：</p><p>$$\Omega = {2,3,4,6,7,8,9,B,C,E,F,G,H,J,K,M,P,Q,R,T,V,W,X,Y}$$</p><p>其中部分字符有不同的字体，部分英文字符有大小写，但不影响识别且为简化识别步骤，故将其分为同一类。</p><p>对字符主要提取4*4的粗网格统计特征：</p><p><img src="/assets/Blogimg/验证码识别技术研究/4.PNG" alt></p><p>计算每个网格内的像素值占总像素值的比列，将这16个数据作为一组特征向量储存，以二进制储存对应的类别编号。</p><p>为提高识别率，增加了边缘特征：</p><p><img src="/assets/Blogimg/验证码识别技术研究/1.png" alt><img src="/assets/Blogimg/验证码识别技术研究/2.png" alt></p><p>对作图所示的字符使用Canny边缘检测得到字符的边界，如右图所示，统计左图黑点数及右图白点数，将比值作为特征向量的第17个数据加入。</p><h5 id="字符识别及结果分析："><a href="#字符识别及结果分析：" class="headerlink" title="字符识别及结果分析："></a>字符识别及结果分析：</h5><p>对单个字符的识别采用 K 近邻(KNN)算法，该方法首先储存训练样本，计算测试样本和每个训练样本特征向量的欧式距离，若在所有的训练样本中，得到与测试样本最接近的的 K 个的样本出现频率最高的类别，则该样本也属于这个类别。多次实验后取K为4。</p><p>之前<strong>投影分割</strong>步骤中提到的出现与待识别字符大小及像素点均类似的噪声，使用KNN计算后得到的与样本最小距离偏较大，多次实验后，得到大致阈值。若KNN步骤中最小 距离大于该值的对象则舍弃，以此去除该类噪声。</p><p>另取100张验证码人工标注后以之前的样本库用KNN识别，正确的有92幅，识别率为0.92。出现错误的结果原因基本为字符缺少，应为预处理步骤阈值等需要调整。</p><p>已用程序标注好所有一万张验证码。</p><h3 id="接下来的工作"><a href="#接下来的工作" class="headerlink" title="接下来的工作"></a>接下来的工作</h3><ol><li>校验程序标注的验证码</li><li>解决仍存在识别结果错误的问题</li><li>用Python重写程序以提高程序效率</li></ol><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Startpre=>operation: 预处理sp=>operation: 字符分割re=>operation: 字符识别e=>endst->pre->sp->re->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: Starta=>operation: 颜色聚类b=>operation: 噪声处理c=>operation: 投影分割d=>operation: 模式识别e=>endst->a->b->c->d->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content>
      
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> Matlab </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Pycharm+Anaconda+Opencv图像处理环境配置</title>
      <link href="/2017/04/14/python-opencv/"/>
      <url>/2017/04/14/python-opencv/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>软件下载略</p><p><strong>opencv</strong> 的库可以从这里下载：</p><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Unofficial Windows Binaries for Python Extension Packages</a></p><a id="more"></a><p>复制入/lib/site-packages</p><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="python">pip install *.whl</code></pre><p>进行安装</p><p><strong>Anaconda</strong>是一个成熟的python科学计算发行版，包含很多常用的库，省去了很多麻烦</p><p>可以在这里获取licenses，并放入user/.continuum：</p><p><a href="https://anaconda.org/limbopy/settings/add-ons" target="_blank" rel="noopener">licenses</a></p><p>有自己的控制台命令</p><p></p><p class="code-caption" data-lang="conda" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="conda">conda -h</code></pre><p>可以查看帮助</p><p><strong>Pycharm</strong>是功能强大的python IDE，虽然<strong>Anaconda</strong>有捆绑<strong>Spyder</strong>，但这款功能更强</p><h3 id="PyQt5的配置"><a href="#PyQt5的配置" class="headerlink" title="PyQt5的配置"></a>PyQt5的配置</h3><p>由于需要编写GUI，与设计数据库的方式很类似，配置可参考<a href="http://www.jianshu.com/p/094928ac0b73" target="_blank" rel="noopener">Python3 PyQt5 pycharm 环境搭建</a></p><p>在from PyQt5 import 包时报错，原因是Python3.6(Anaconda)目录下缺少python3.dll文件，从官网下载embeddable包复制即可，参考<a href="http://blog.5ibc.net/p/116112.html" target="_blank" rel="noopener">python3.6.0(Anaconda)安装PyQt5，“DLL load failed: 找不到指定的模块</a></p><p>需要调用资源配置在pyrcc中配置，与配置pyuic类似，pyrcc5.exe文件再anaconda/scripts目录下</p>]]></content>
      
      
      
        <tags>
            
            <tag> PyQt </tag>
            
            <tag> Python </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下配置Hexo+GitHub博客基本步骤及遇到的问题</title>
      <link href="/2017/04/14/Windows%E4%B8%8B%E9%85%8D%E7%BD%AEHexo-GitHub%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/04/14/Windows%E4%B8%8B%E9%85%8D%E7%BD%AEHexo-GitHub%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>初衷是想找一个成本低廉又能保存一些技术学习笔记的地方，免费的OneNote对代码输入非常不友好，因此想到这样一个折中的搭建个人博客的方法，hexo用于搭建静态博客非常方便，同时能使用markdown编辑文章，而GitHub的门槛也非常低，网上教程也很多，步骤和自己遇到的一些问题如下：</p><a id="more"></a><h4 id="安装Node-js及Git"><a href="#安装Node-js及Git" class="headerlink" title="安装Node.js及Git"></a>安装Node.js及Git</h4><p>从主页下载即可，配置好git</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>打开终端，输入</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">npm install -g hexo</code></pre><p>等待安装完成，无法安装可设置npm代理</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">npm config set registry http://registry.cnpmjs.org</code></pre><h4 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h4><p>在预备作为储存博客页面的文件夹内打开终端，依次输入</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">1. hexo init #会自动创建git repo2. npm install</code></pre><p>查看是否创建成功</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">1. hexo generate #生成静态页面2. hexo server #在本地启动 少用，由于路径的原因，会产生各种问题</code></pre><p>浏览器输入默认的local:4000端口即可查看页面</p><h4 id="创建GitHub-repo"><a href="#创建GitHub-repo" class="headerlink" title="创建GitHub repo"></a>创建GitHub repo</h4><p>注意repo名应当为username.github.io否则部署后会有问题</p><h4 id="获取SSH密钥并添加"><a href="#获取SSH密钥并添加" class="headerlink" title="获取SSH密钥并添加"></a>获取SSH密钥并添加</h4><p>打开终端，键入</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">ssh-keygen -t rsa -C &quot;xxx@xx&quot; #后为github账号注册时的邮箱地址</code></pre><p>在User\name \ .ssh\路径下找到id_rsa.pub</p><p>复制密钥，添加入GitHub的setting中即可</p><p>测试是否添加成功：打开终端，输入：</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">ssh -T git@github.com</code></pre><p>成功添加会提示相应字样</p><p>ps：代理等原因会影响连接，例如</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">$ ssh -vT git@github.comOpenSSH_7.3p1, OpenSSL 1.0.2k  26 Jan 2017debug1: Reading configuration data /etc/ssh/ssh_configdebug1: Connecting to github.com [93.46.8.89] port 22.debug1: Connection established.debug1: identity file /c/Users/Limbo/.ssh/id_rsa type 1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_rsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_dsa type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_dsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ecdsa type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ecdsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ed25519 type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ed25519-cert type -1debug1: Enabling compatibility mode for protocol 2.0debug1: Local version string SSH-2.0-OpenSSH_7.3ssh_exchange_identification: Connection closed by remote host</code></pre><p>关闭代理即可</p><h4 id="Hexo的配置和部署"><a href="#Hexo的配置和部署" class="headerlink" title="Hexo的配置和部署"></a>Hexo的配置和部署</h4><p>_config.yml为全局配置文件，在Deployment区域，修改为：</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">deploy:  type: git  repo:      github: git@github.com:username/username.github.io.git,master</code></pre><p>若要关联自己的域名令需添加CNAME文件</p><p>终端部署命令：</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">hexo clean #清楚缓存hexo generatehexo deploy</code></pre><p>在此之前可能需要输入</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p>安装部署插件</p><p>至此，基本的配置工作已完成。</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">hexo new &quot;title&quot;</code></pre><p>可在source\ _posts下生成“title”标题的新md文件</p><p>由于国内的特殊网络环境，访问已搭建好的页面需要输入<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a></p><h3 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h3><p>推荐一个主题<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></p><p>也是本站正使用的，Reademe很详细也不再此赘述</p><h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><p>如果你有闲置的域名，可以将其绑定至刚配置好的博客页</p><p>在域名管理页的DNS控制中添加域名解析类型为A指向IP地址(在控制台中ping一下搭好的博客地址可以得到)或者添加CNAME指向域名，选择其一即可，不能同时添加</p><p>在source目录下添加名为CNAME的文件(无后缀)，内容为你要绑定的域名</p><p>修改_config.yml中的url为要绑定的域名，部署即可</p><h3 id="关于写作"><a href="#关于写作" class="headerlink" title="关于写作"></a>关于写作</h3><p>在文章中加入<code>&lt;!-- more --&gt;</code>可以将文章截断显示在主页，防止文章过长</p><p>文章头的reward和comments分别为打赏和评论，值为True/False</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">hexo new page xxx</code></pre><p>可以新建一个名为xxx的页面，以此做了一个留言板</p><hr><p><em>以下是对<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>主题的修改，增加一些功能</em></p><h3 id="跟帖及留言"><a href="#跟帖及留言" class="headerlink" title="跟帖及留言"></a>跟帖及留言</h3><p>添加评论以及留言的功能，的功能，按照<a href="http://lawlite.me/" target="_blank" rel="noopener">lawlite</a>的方法并没有成功，因此改用来必力的跟帖</p><p>从来比力网站获取web代码后，在themes\yilia\layout\ _partial下的article.ejs最后添加即可</p><p>例如：</p><p></p><p class="code-caption" data-lang="html" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="html">&lt;% if (!index &amp;&amp; post.comments){ %&gt;&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;XXXXXXXXX&quot;&gt;  &lt;script type=&quot;text/javascript&quot;&gt;   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === &#39;function&#39;) { return; }       j = d.createElement(s);       j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;;       j.async = true;       e.parentNode.insertBefore(j, e);   })(document, &#39;script&#39;);  &lt;/script&gt;&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;&lt;/div&gt;&lt;% } %&gt;</code></pre><p>最外层的标签可以取消在主页和控制文章中显示跟帖</p><h3 id="网站访问量功能"><a href="#网站访问量功能" class="headerlink" title="网站访问量功能"></a>网站访问量功能</h3><p>在<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>获取代码后放入themes\yilia\layout\ _partial下的footer.ejs中即可</p><h3 id="在文章中插入音乐"><a href="#在文章中插入音乐" class="headerlink" title="在文章中插入音乐"></a>在文章中插入音乐</h3><p>由于是在github上搭建的博客，直接从网易云获取的外链不支持https，从知乎搜索到一个解决办法</p><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">npm install --save hexo-tag-aplayer</code></pre><p>安装播放器插件</p><p><del>在<a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="noopener">A Flask Music Project. Demo</a>项目中找到音乐链接，修改相应参数即可</del></p><p>在网易云音乐中找到对应曲目，然后生成外链。</p><p>代码如下：</p><p></p><p class="code-caption" data-lang="html" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=329 height=100 src=&quot;https://music.163.com/outchain/player?type=2&amp;id=26513177&amp;auto=0&quot;&gt;&lt;/iframe&gt;</code></pre><p>效果如下：</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="100" src="https://music.163.com/outchain/player?type=2&id=26513177&auto=0"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/04/14/hello-world/"/>
      <url>/2017/04/14/hello-world/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="Code" data-labels_right=":" data-labels_copy="Copy Code"><span class="code-caption-label"></span><a class="code-caption-copy">Copy Code</a></p><p></p><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello world </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
