[{"title":"前端学习week14","date":"2019-08-04T14:38:29.000Z","path":"2019/08/04/前端学习week14/","text":"​ 本周主要学习了正则表达式的基础知识，细节和小知识点非常非常多，看记录的内容就知道了，主要的学习目的还是能看懂和理解正则表达式以及js常用的正则api及其原理，例如正则对象的exec，test以及字符串的match和replace，不强求写出优雅简洁的正则，毕竟智商有限。此外简单介绍了日期类型和es6的增强字符串-反引号 ​ leetcode方面到了265题，这周主要在做正则的题目，没怎么刷，重点是几道回溯法的练习，解数独，八皇后问题等，感觉自己对复杂一些的代码掌控力还不够，写起来比较乱，有思路也写不出来，还是要练习练习练习 正则表达式 正则表达式也是一种对象类型 构造函数RegExp 用构造函数创建注意反斜杠的规则和字符串相同 字面量创建，两边用斜杠包围 斜杠是结束标值，所以表达式包含斜杠时，需要在前面加反斜杠 source属性，包含创建正则表达式的字符串，不包括//及外面的flags lastIndex属性，可写属性，控制下一次匹配开始的位置，只有当使用设置了g的时候才能被更新和修改，且只对exec和test生效，匹配失败会被重置为0 中括号只匹配一个字符，匹配中括号中任一字符 可以用连字符-指定范围，按unicode顺序，单独的-表示它自己 .在中括号中没有其他含义只表示其自己，其他特殊字符也是，比如+ * ^脱字符出现在最前面表示取非，不在最前面没有其他含义，[^]表示匹配全集 +前面元素至少重复一次，*重复至少0次，?前面元素出现1次或0次，{}内加数字或范围表示重复具体次数，前面的元素加()使多个元素重复 表达式末尾i表示不区分大小写/xxx/i 表达式末尾g表示全局匹配输入字符串中所有能匹配的项默认匹配第一个项就结束匹配/xxx/g 如果匹配的字符串有交叉，例如用/abcabc/g匹配abcabcabc只会匹配第一个匹配项，不会匹配交叉的第二个 脱字符^ 用在开头表示输入字符串的起始位置，$表示字符串结束位置，/^xxx$/则输入字符串必须从头至尾满足条件 \\bxxxxx\\b 单词边界，包裹的元素是一个独立单词，字符串的起始结束位置都是数字/字母/下划线(即\\w表示的字符) (?:)匹配项不会作为分组，结果不会出现在exec的结果数组中 (?&lt;name&gt;)可以给分组命名，只有自命名的分组的匹配项会出现在exec的group属性中 零宽断言 匹配两个符号之间的一个位置而不是符号，宽度为0 可以对同一个位置执行多个零宽断言匹配 零宽断言不是分组 /(?=foo)/匹配到字符串中foo开始的位置 /(?!foo)/位置后面不能匹配foo /(?&lt;=)/位置左边匹配xxxxx 回顾断言中有重复符，则贪婪模式是从右向左满足 分组时和正常一样是从左向右分配和自动命名的的，但反向代理的\\n需要放在分组的左边才能生效，即分配时是从左往右，扫描匹配时是从右往左 /(?&lt;!)/ 例： ^ === /(?&lt;![^])/ $ === /(?![^])/ \\b === (?&lt;=\\w)(?=\\W)|(?&lt;=\\W)(?=\\w)|(?&lt;![^])|(?![^]) 管道符| 表示或，需要用括号来限制其选项范围 记住正则的实现是从前向后按步进行的，回溯只存在于当前匹配不成功的情况 反向引用 前面分组匹配结束时，自动命名的分组可以用\\n引用匹配项 任何情况下都是以正则表达式中开始括号的顺序作为分组的顺序，即使用了|运算符 自命名分组可以用\\k&lt;name&gt;反向引用，同时也可以用\\n 方法 test 接受字符串，返回布尔值，存在匹配项就返回true exec 无匹配返回null，否则返回匹配信息对象 返回的对象是字符串组成的数组，包含整体及所有圆括号的分组，重复分组则保留最后一次，重复0次的保留undefined，增加了index，groups，input属性 group属性是一个对象包含自命名分组及其匹配项的键值对 exec设置了全局g也只会先返回第一个匹配项(同时更新lastIndex属性)，继续执行会向后匹配，不设置g多次执行会重复匹配第一项 String.prototype.match()是字符串的方法 参数里的正则使用g，则返回所有完整匹配项的结果数组（不包含分组），形式和普通数组相同 不使用g则返回第一项完整的匹配及其相关的分组匹配，形式和exec一样 replace 字符串的方法，用第二个参数替换第一个正则参数匹配到的字符串，第二个参数可以为函数，第一个参数也可以是字符串 第二个参数为函数时，传入的参数依次为exec执行后的结果数组的元素，依次为整体匹配项，各分组捕获项，匹配的index，命名分组，输入的字符串 设置g可以全局匹配，实际是重复执行匹配直到全部匹配结束 $n是正则自带的分组匹配到的字符串表示方式，不能把它当做完全的字符串看待，只能做增加字符，换位等操作 \\n用在分组开始匹配之前相当于匹配任何位置,即分组还没开始匹配 /\\1/.test(&#39;&#39;) // false /\\1()/.test(&#39;&#39;) // true 注意正负回顾零宽断言时的这个规则 贪婪模式 模式重复运算符+ * ? {}默认是贪婪的，会匹配尽量多的字符直到不能匹配再回溯 在模式重复运算符后加?变为非贪婪，会匹配尽量少的字符，只有剩下的模式无法匹配才会继续匹配重复 使用重复时优先考虑非贪婪 日期类型 构造函数Date，默认创建当前时间对象 自定义时间：月份从0开始，日期从1开始，小时分钟等不设置默认为0 getTime方法返回1970年开始以毫秒表示的时间戳 ，也可以用时间戳创建对象 模板字面量 反引(``)号表示的增强版字符串 支持多行，保留所有空白 也可用\\n指示换行位置 变量占位符 新增特性，由${}将变量嵌入字符串，中间可以放任意的表达式，包括运算符函数调用等，注意用反斜杠转义可以使其失效 标签模板 String.raw`` 反引号内写入字符串不用考虑转义，所见即所得，输出字符串，任意形式的转义都会失效，保留原样输出 形如上面这个例子，String.raw模板标签，实际上它是一个函数，后接模板字面量相当于传参，在控制台我们可以看到它传入参数的形式 第一个参数是一个数组，包含以变量占位符为隔板分隔的各个子串(类似split)，此外该数组还包含一个不可枚举的raw属性包含的数组，内容形式和包含它的数组内容相同，不过字符串内容与输入时的状态完全相同(即转义都不生效且保留转义符，然而变量占位符依然生效)，这也解释了为什么上一个例子会保留输入原样输出(正是利用了raw) 第二及以后的参数为从前到后各变量占位符中表达式的值 零碎知识 源代码书写字符串的时候才要考虑转义 字符串的split方法，参数为正则表达式时，会在各匹配项对应的位置返回分组捕获的字符串不会出现整体匹配的字符串","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week13","date":"2019-07-28T15:00:44.000Z","path":"2019/07/28/前端学习week13/","text":"​ 本周学习了最后一个常用排序算法-堆排序以及一些哈希表的基本概念，理解其思想和使用情景即可。js基础学习了异常处理和严格模式。红黑树没看完，只看完了基本概念，下周补完。leetcode方面到了245，有所放缓，其实是划水太多，要抓紧了 堆，堆排序 堆(heap)是一种数据结构，也叫优先序列(PriorityQueue) 区别于”堆内存(heap memeory)”的堆 堆内存对应栈内存 堆内存是随机分配的 栈内存对应调用栈 栈空间指一片内存 调用栈指函数间互相调用及等待的逻辑概念 堆是一棵完全二叉树 每个结点都比其子节点大(小) 最大/最小堆 (最大/最小值一定处于堆顶) 主要支持两种操作 增加一个元素 取出其最值 操作不影响堆的性质 堆排序是将长度为n堆数组的第一个值交换到最后，再将前n-1个数的数组堆化，直到数组有序 堆尾增加一个元素： heapUp 堆头增加一个元素： heapDown 例：取出堆的最值，将堆尾元素放在头部重建为堆 将一个无序数组转换为堆： 将数组当做按层遍历的二叉树，从末尾最小的二叉树头结点（最后一个元素的父节点）做heapDown操作，循环至堆头 找出第k大的元素，构建一个大小为k的最小堆 异常处理 try(throw)–catch–finally catch捕获的看前面throw的是什么，默认的错误是一个对象，因为是Error()的实例 编译器先确定程序没有语法错误才开始执行 throw立即停止运行直到被catch Error()是构造函数 严格模式 &quot;use strict&quot; 静默错误现在会抛出异常 不允许不声明创建全局变量 只限定当前作用域下的代码，不限制调用的函数 直接调用方法/构造函数，this绑定undefined而不是window 函数形参名唯一 不能使用八进制字面量(即0开头的数字类型)，但可以写成0oxxx 不允许直接使用eval()在当前作用域中创建变量或函数 在严格模式下，eval()在运行时有自己的词法作用域，意味着其中的声明无法修改所在的作用域，但是可以获取eval()内语句块的返回值 不能覆写arguments的值 es6一些语法会自动开启es6模式，例：class 哈希表(散列表)哈希函数 散列函数生成的值要尽可能随机且均匀分布 哈希冲突即不同key经过哈希函数计算出相同的值，很难通过完善算法的方式完美解决，所以需要其他的途径 开放寻址法 如果出现了冲突，就重新探测一个空闲位置将其插入 线性探测 步长为1 二次探测 步长为平方 双重散列 冲突则再哈希一次 装载因子： 填入表中的元素个数 / 散列表的长度 装载因子越大，空闲位置越少，散列表性能越低 动态扩容/缩容，设置阈值保持执行效率 链表法 每个slot对应一条链表，hash值相同则直接加入链表末尾 平衡二叉查找树严格的平衡二叉查找树是指这棵二叉查找树任意结点的左右子树高度差不能大于1，使树的高度保持以2为底logN 设计平衡二叉查找树的初衷是为了防止频繁的插入和删除操作造成的性能退化，常见的平衡二叉查找树： AVL树：严格符合以上定义，是高度平衡的二叉查找树 红黑树(R-B tree)：不严格符合高度差为1的定义，但是能思想是一样的，即保持左右子树高度大致相等，所以也认为是合格的平衡二叉查找树，很多种平衡二叉查找树都不严格符合定义 定义： 根结点是黑色 每个叶子是黑色的空结点NIL 相邻结点不能同时为红色，即红色结点被黑色结点隔开 *从任意结点到达其可到达的叶子结点路径经过的黑色结点的数量是相同的 红黑树是“近似平衡”的(即性能不会退化地太严重，树的高度稳定地趋近以2为底logN) 插入操作 插入结点必须是红色，新插入的结点放在叶子结点上 旋转 变色 删除操作 零碎知识 浅拷贝和深拷贝 浅拷贝只复制对象的第一层 深拷贝递归复制所有层级 直接调用eval()是在当前作用域下调用，凡是使用别名调用eval()则一律是在全局作用域下 函数表达式的函数名是常量绑定，只在该函数内部有效，在函数内对其赋值在非严格模式下会静默失败，严格模式下会报错 (function a() { a = 3 console.log(a) })() //会打印出整个函数体 //可以理解为a函数相当于const定义的常量 注意函数声明提升https://blog.csdn.net/sinat_35512245/article/details/53514804 函数表达式可以后面加括号立即调用，函数声明不可以 给函数声明整体加括号相当于将函数声明转换为函数表达式，就可以立即调用了 两种立即执行函数的写法( function(){…} )()和( function (){…} () ) call 比 apply的性能更好，因为传入的参数是函数需要的格式 对象中若有splice属性存放数组的splice方法以及length属性，会自动转为object []形式 dot notation比用[]读取对象的属性性能好 for的性能远高于forEach 因为for循环没有额外的函数调用栈和上下文 forEach里操作了toObject以及循环终止等逻辑更加复杂","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week12","date":"2019-07-21T12:34:15.000Z","path":"2019/07/21/前端学习week12/","text":"​ 学习时间正好三个月了， 本周学习了快排，这样排序算法就差堆排序没学了。本周的重点还是js的面向对象的概念，js除了几个基本数据类型(number,string,null,undefined)，其他的数组函数等都能视作对象，甚至基本数据类型也有包装对象的概念。要理解js的面向对象，原型和原型属性是非常重要的知识点，要理清数据类型的原型几个构造函数的原型属性之间的关系，接着是自定义构造函数。leetcode方面到了210题，但是感觉最近提升有限，似乎到瓶颈了，还是要多总结 排序 sort方法的函数值参数为什么用两个参数，而不是一个？ 一个参数局限性大，两个更灵活，sort内部实现根据箭头函数的返回值来对元素排序，可以自定义排序条件 排序算法的稳定性： 排序前后不改变相同元素的相对位置 稳定： 冒泡 归并 插入/BST 返回新数组的快排 不稳定： 选择排序 原地快排 快排 主要思想是先随机取一个位置的数，将大于，等于， 小于它的数分组，再递归 切分不平衡可能使排序效率较低，一个解决办法是排序前先将数组随机打乱 当数组中所有数都相同时，时间复杂度会退化为n * n，调用栈也会达到n层 小数组时快排比插入排序慢 原地快排将取样元素放在数组末尾作为哨兵来优化partition 深入理解对象 方法中的this指向当前方法所属的对象，相当于函数的隐含参数 eg: apply() bind() this 是对象中的一个特殊变量 箭头函数根据当前的词法作用域而不是根据this机制顺序来决定this，所以，箭头函数会继承外层函数调用的this绑定，而无论this绑定到什么，且不能改变箭头函数的this绑定，可以当做箭头函数没有this 箭头函数不能用做构造函数，即其没有原型属性 箭头函数没有arguments属性 原型 对象都包含一个原型，原型也是一个对象，原型也有原型。。。Object.prototype是所有对象原型的父原型 Object.prototype.__proto__结果为null 访问对象中不存在的属性，会在其原型中搜索，接着是原型的原型，以此类推 访问属性的优先级 对象自身 &gt; 原型 即对象和原型有同名属性有限调用对象自身的属性 Object.getPrototypeOf()获取对象的原型 Object.creat(prototype)以原型创建对象 传入null创建无原型对象 原型和原型属性 对象的原型：obj.__proto__ 原型属性： 每个函数（且一般只有函数才有）都有一个原型属性 f.prototype 原型属性是一个对象，对象内的属性包含构造器标识（即这个函数）， 以及实例能调用的方法 函数对象本身的属性可以在构造器标识内查看，这是实例不能调用的 即实例的constructor属性可以查看这个实例的构造函数 这个概念是针对构造函数来说的，可以理解为本来有的原型基础上的衍生原型（添加了自己定义的属性），就是它会作为这个构造函数的实例的原型 因此f.prototype.xxx可以给构造函数的原型属性添加属性，这样这个构造函数的实例就能使用这个属性 可枚举/不可枚举属性，默认创建的是可枚举（会出现在for/in循环中，不可枚举属性不会，但是可以用in返回true） 原型属性是一个对象， 创建的实例的原型指向这个对象，修改构造函数的原型属性指向的对象，在这之前创建的实例的原型指向不会变 Object.prototype.toString()判断包装类型 包装类型 每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据 自动创建的基本包装类型的对象，则只存在于一行代码执行的瞬间，然后立即被销毁了。这就意味着，不能在运行时为基本类型值添加属性和方法。 构造函数 调用函数前用new表示调用其构造函数 new一定会返回对象，当构造函数返回的不是对象则会被忽略 注意用不用new的区别，不用new相当于给当前作用域的活动对象添加属性 通过new创建的对象称为构造对象的实例 instanceof判断实例是不是某个构造函数（或者继承的父构造函数）创建的 面向对象 表达一个事物是离散存放的 封装： 把表达一个事务的最终信息及可能的操作（即函数）放在一起 同一类对象有相同的一组属性和一组函数 继承：让一个类直接获取另一个类所有的属性和方法 多态：不关心得到的事物具体是什么类别，更关心这个事物是否有某方面特性(有特定的一组属性和方法) class Javascript 类 创建的方法不可枚举 class A { static a(){} static b(){} constructor(){} method1(){} method2(){} get length(){} set length(val){} } typeof A == function 零碎知识 判断类型 typeof 用来判断原始类型 Object.prototype.toString.call判断内置对象类型 instanceof判断自定义对象类型 new.target === f判断f是否正在被new调用 Object.defineProperty(obj, &#39;name&#39;, {})给对象/原型添加属性 {}内依次为value，get，set，enumerable， writable， configurable value和（get，set）只能出现一个 直接给原型赋值对象， name.protorype = {constructor: name, xxxxx} 用Array.prototype.slice().call(arguments)在函数中创建参数的数组（arguments是类数组不能直接用数组方法），也可以用[].slice().call(arguments)","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week11","date":"2019-07-14T14:47:24.000Z","path":"2019/07/14/前端学习week11/","text":"​ 本周主要学习了js高阶函数的用法，可以将函数作为参数传入另一个函数使用，熟悉几个自带的数组方法函数，另外简单介绍了一下JSON。数据结构学习了二叉树，前中后序遍历，搜索二叉树的性质，增删结点，加深理解还是要靠刷题。leetcode方面，本周到了160题，下周争取200，还是应该注重质量，算法方面动态规划是个难点，概念了解的差不多了，但是大部分题目感觉还是很难，另外这周一定要把算法部分的排序和二分查找部分看完 高阶函数 _实参占位符 以函数值为实参没有产生闭包 函数的length属性返回形参的个数，name属性返回函数名 传参 函数的apply方法，将数组或类数组作为单独参数传入，防止多余的参数被忽略 现在一般用省略号 数组以函数为参数的方法 forEach 一个函数参数， 只是对各元素进行操作，没有返回值，forEach不直接改变调用它的对象，但是对象可能会被callback改变 只遍历存在的项，empty不遍历 除了抛出异常无法阻止forEach filter 一个函数参数，返回包含通过测试的元素的新数组 map 一个函数参数，返回回调函数的结果的新数组 reduce 一个函数参数，数组第一项作为初始值，初始值变量分别和数组剩下的每个值会作为操作函数的参数，返回最后迭代后的值 初始值可选，如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错 函数参数前一个形参是累计器，后一个是数组元素 实际上前三个方法传入的参数为三个，分别为 Current Value (cur) (当前值) Current Index (idx) (当前索引) Source Array (src) (源数组) reduce在最前面还有一个Accumulator (acc) (累计器) 给函数参数传入的参数也是这几个参数，所以需要注意接受多余的参数是什么，会造成什么后果，怎么利用 函数值参数可简写为箭头函数 只有一个参数时可以省略括号 只有一个return语句时可省略return和花括号 函数的方法： bind(null, xx,xx)，返回一个新的函数，相当于在原函数内给对应位置的参数附值绑定，返回的新函数就没有这个形参了，null后紧接着原函数的第一个参数，以此类推 function bind(f) { var fixedArgs = Array.from(arguments).slice(1) return function() { var args = Array.from(arguments) return f.apply(null, fixedArgs.concat(args)) } } apply方法，用数组来指定函数的参数 JSONJavascript Object Notation 属性名必须用双引号，只能包含简单的数据表达式，不能包含注释 parse 和 stringify函数 没有undefined 不能出现明文tab符 不能出现多余符号 二叉树 完全二叉树 前pre/中in/后序post遍历 traversal 排序二叉树BST 结点左结点的值小，右结点的值大 中序遍历，得到有序序列 是一种插入排序，利用这点可以很快地判断是否为BST，是BST很重要的一个性质 添加结点 删除结点 零碎知识 toString方法可以将数字转为2-36进制的字符串 sort()方法默认情况下按照升序排列数组项，sort()方法会调用toString()转型方法，然后比较得到的字符串，即使我们比较的是数字，他也会把数字转为字符串以后再排序 关于动态规划(dynamic programming)的理解 每个阶段只有一个状态-&gt;递推； 每个阶段的最优状态都是由上一个阶段的最优状态得到的-&gt;贪心； 每个阶段的最优状态是由之前所有阶段的状态的组合得到的-&gt;搜索； 每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的-&gt;动态规划。 动态规划的三个组成：最优子结构，边界， 状态转移 递归是自顶向下的，而动态规划的本质是自底向上的 解决动态规划/递归中的重复计算 “备忘录算法”：将递归中计算过的值存入哈希表 自底向上递推，动态存储下次计算需要的状态 归并排序 基本思想是将数组递归地分成两半分别排序，再将结果归并 优化： 小规模子数组可以使用插入排序 增加一个判断：arr[mid] &lt; arr[mid + 1]时可认为数组已经有序，跳过merge，直接连接 一般是自顶向下的方法，也可自底向上两两归并，四四归并。。。。这种方式适合处理链表原地排序 数组的includes方法可以正确判断NaN，indexOf不行 Array.from()将类数组对象转为数组 arguments 是一个对应于传递给函数的参数的类数组对象","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week10","date":"2019-07-07T12:35:01.000Z","path":"2019/07/07/前端学习week10/","text":"​ 本周主要学习了数组和对象这两种数据结构，在js中，除了集中原始值，其他数据结构都能视作对象，另外简单介绍了一下链表，js中的链表结构比较简单，操作也很方便。需要理解的是对象标识符指向对象的存储地址(这也比其他语言简单很多)，另外就是js数组和字符串的一些方法函数，需要在使用中加强记忆。 ​ leetcode刷到了100题，熟练度确实有点用，应该抽出点时间review，下周争取130+，另外看完算法的排序部分 UTF-8 变长编码 第一个字节的前几位表示这个字符占用多少个字节 一个字节01xxxxxx 两个字节110xxxxx 三个字节1110xxxx 四个字节11110xxx 之后的每个字节的都是10开头，因此不同字节长度实际存储该字符所占二进制位： 一个字节： 6 两个： 5 + 6 三个： 4 + 6 + 6 四个： 3 + 6 + 6 + 6 特点： 变长 兼容标准ASCII 容错 数组和对象 读取null和undefined的属性会报错 用.和[]都可以方问属性，但是点后直接跟属性名，方括号会计算其中的表达式并把返回值作为属性名 属性名是字符串 可以使用方括号访问数字或带空格的字符串作为属性名的属性 数组是值的有序集合，对象是值的具名集合 delete obj.a 一元运算符 删除对象中的a属性 str in obj 二元运算符 返回布尔值，对象中是否有这个属性 in用在数组中是检测这个位置是否为空，并不是是否存有这个值 indexOf只能检索大于等于0的整数下标，其他都返回-1 for (name in obj) 遍历对象的属性 ，属性名字符串传给name 这里的in不是运算符 对象的浅比较和深比较 == 和 === 比较的是对象是否是同一个引用 深比较是比较属性和值是否相同而不论是否是同一个引用，js没有深比较的api，需要自己实现 一些数组的方法 fill(item, start, end) 填充，不包括end位置，start和end都省略则填充empty flat() 展开一级，返回新数组 里面有对象不展开 include(value) 判断数组中是否有这个值，返回布尔值 不能判断对象，除非是同一个引用 给原始值添加对象和读取对象，不会报错但会读取undefined，可以用Object()创建原始类型(对象)的包装对象(一个真实的对象包装了一个原始类型) 不建议使用 字符串的trim()方法，删除开头和结尾的空白符号(空格，换行，制表等) arguments对象很像数组，有length属性， 但不包含任何数组方法， 是一个类数组对象 类数组对象：任何一个具有length属性以及对应非负整数属性的对象 类数组对象不能直接使用数组方法，但是可以Array.methods.call(obj, xxx)调用数组方法 Array.from() 方法从一个类似数组或可迭代对象中创建一个新的，浅拷贝的数组实例 ...省略号运算符 rest parameter 剩余参数，只能出现一次且只能出现在形参最后 spread operator 展开数组和对象，展开对象时只能用在创建对象和数组的字面量时使用，因为展开形式为对象中属性及对应值的表达式 可以给形参赋值作为缺省的默认值 零碎知识 递归四条准则 基准情形 不断推进 设计法则 合成效益法则 使用递归时注意递归过程中重复计算的问题，可以储存各计算结果当遇到这个计算时直接返回值 不要使用全局变量(除非刻意要用) 注意返回新对象还是在原对象上操作的一致性 document.write() 向文档解析流写入内容 文档一旦解析完成&lt;/html&gt;，解析流关闭 重新write会导致重新打开一个解析流，之前的内容完全覆盖 排序算法 希尔shell排序 希尔排序的思想是 将原数组中间隔h的子数组使用插入排序，循环减少h至h=1即排序完成 实际是插入排序的优化版，能将离本来位置较远的元素更快地移动到本来的位置 实际使用中是性能最好的初级排序","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week9","date":"2019-06-30T13:38:35.000Z","path":"2019/06/30/前端学习week9/","text":"​ 本周正式开始了一边学习js基础一边leetcode的刷题，才发现自己的数学基础真的很薄弱，果然以前欠的都是要还的，只能慢慢训练了，以后坚持每天刷两道题以上，每周复习一次之前刷过的题目，争取结课前能突破500。 ​ js方面，本周主要学习了初级函数的定义，一个重要的知识点是闭包，不同书对闭包的定义可能有出入，但是本质是大体一样的，就是每次函数调用都会创建一个新的作用域，这个作用域和同一个函数的其他作用域不会相互影响。其他就是一些细枝末节的东西，应当经常复习 函数 在if或循环中最好不要写函数申明 function a() {} //不同浏览器可能会出现问题 &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 但是可以写函数表达式赋值 var a = function() {} 传参 都是值传递 arguments 得到所有传入实参的数组 传入的实参为对象时，可以修改对象的属性，这一点很像const声明的常数变量为对象时可以修改其对象 其他情况对传入的参数赋值等操作实际都是对arguments的项的操作，不能影响原来的变量 多余的参数会被忽略 少传的参数会被赋值为undefined 闭包 局部变量在每次函数调用时都会重新创建，且函数调用不会对其他函数调用内的局部变量产生影响 包装了局部变量的函数就叫做一个闭包 零碎知识 101..toString(2)第一个点为数字小数点 数组的splice方法有三个参数，分别为位置，删除的个数， 和要添加的元素，可以将要删除的个数置零用作向某位置插入元素 可以在循环最外面加标签的方法跳出多重循环 loop: for(xxxx) { for(xxxxx){ break loop } } &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 数组的push, pop，unshift返回的是修改后数组的长度，shift返回的是取出的值，splice返回的是删除的数组 空数组取非的布尔值是false，但是空数组转换成数字是0，而且空数组==false返回的是true 函数表达式赋值声明 var a = function b () {} // b标识符可用于函数内的递归操作，一般省略 js的无符号右移&gt;&gt;&gt;即便没有发生实际位移，即位移位数为0，也会将前面的位数置0，并转为无符号数 非数值&gt;&gt;&gt;0会得到0 -1 &gt;&gt;&gt; 0会得到2 ** 32 unsigned = signed &gt;&gt;&gt; 0通过使用无符号右移运算符，位动位数为0，可以将32位有符号整数，转化为32位无符号整数。 signed = unsigned &lt;&lt; 0通过使用左移运算符，位动位数为0，可以将32位无符号整数，转化为32位有符号整数。 ??可用来代替||当不需要短路特性时 在不声明直接初始化的变量之前引用这个变量会直接报错，并不会声明提升 一般用判断长度的方法来判断数组是否为空，注意不能用array == []来判断，因为[]相当于new Array()相当于声明了一个新的空数组，程序会自动在堆中为其开辟一块内存空间，它和之前array的内存空间不是同一块，所以自然不相等 Object用等号比较的是内存地址，是否引用了同一个值","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week8","date":"2019-06-19T06:27:06.000Z","path":"2019/06/19/前端学习week8/","text":"​ 本周划水有点厉害，主要还是复习了一边js中数值类型的存储方式，即双精度浮点数(见上周内容)，需要注意的是双精度浮点数虽然能表示很大的数，但是有其能精确表示的数的范围，这是由其只有64位决定的，只有位运算的32位整型中负数是由补码表示的，js中只出现这两种存储格式，其他仅作了解。 另外linux真的不知道该怎么学，本来想利用空余时间学习点linux的知识，以后面试能吹点牛皮，然而那么多命令看过就忘了，只记得一点点基本概念。 函数 变量的声明忌讳直接在前面声明一大坨，即插即用即可(反正编译的时候会全部提到前面)，因此，js可以调用语句后面声明的变量和值。即声明提升(hoisting)：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的，注意声明会提升但是赋值不会。函数声明也有这样的特性 注意局部变量和全局变量 js的全局变量是全局对象的属性，用var声明的不可配置，而赋值声明的可以配置删除 局部变量可以覆盖重定义全局变量，然而只在局部生效 零碎知识 var i = 0 i = i++ console.log(i) //会输出什么结果 //答案： 输出 0 //原理： 先将i = 0 的赋值操作入栈，再将i + 1 入栈再按顺序出栈，最后得到的结果是将i赋值为0 变量名由$，字母，数字，下划线组成，只有数字不能用作开头 涉及return、break、continue、throw语句的场景中。如果这四个关键字后紧跟着换行，javascript会在换行处填补分号 ++和–运算符单独一行时，会作为下一行的前缀解析 js是变量松散类型语言，可以给变量赋不同数据类型的值，但不建议这么做 var语句可以省略，直接对变量赋值会自动声明该变量，但在es5的严格模式下会报错，而且函数内未声明且直接赋值的变量会声明为全局变量，所以不推荐省略 由于undefined并不是一个关键字，其在IE8-浏览器中会被重写，在高版本函数作用域中也会被重写；所以可以用void 0 来替换undefined 不同的对象在底层都表示为二进制，在javascript中二进制前三位都为0会被判断为object类型，null的二进制表示是全0，所以执行typeof时返回’object’ 所以判断一个值是否为null类型的最佳方法是直接和null进行恒等比较 在Number()方法中空字符串和空白字符串都转换为0，而在Boolean方法中，空字符串””转换为false，而空白字符串” “转换为true 自动类型准换中布尔类型只有七个假值(falsy value)，这7个值包括undefined、null、+0、-0、NaN、false、””(空字符串) 转换为false，其他任何情况都转换为true Number(‘’)的结果是0，parseInt(‘’)和parseFloat(‘’)的结果是NaN null和undefined没有toString()方法，而String()函数在非undefined和null会调用toString()方法 一般使用空字符串”” + 某个值，将该值转换为字符串 字符串的substring(start, end)和slice(start, end)方法(substr() 已弃用) slice(start, end) 返回从start位置到end(不包括)的字符串 如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符 如果start是负数，则start = max(length + start,0) 如果end是负数，则end = max(length + end,0) start和end无法交换位置 start &lt; end时输出空字符串 start/end被传入NaN时相当于传入0 substring(start, end) 如果end为undefined或不存在，则返回从start位置到字符串结尾的所有字符 如果任一参数是NaN或负数，则被0取代 如果任一参数大于字符串长度，则被字符串长度取代 如果start 大于 end，则交换它们的值 数组的最大长度为2的32次方-1","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"前端学习week7","date":"2019-06-16T03:04:48.000Z","path":"2019/06/16/前端学习week7/","text":"​ 本周将css的学习进行了收尾工作，介绍了目前还存活的css框架Bootstrap，重点在于grid layout系统是如何实现的。接下来进入了Javascript基础的学习，对于js的基础数据类型，这里坑比较多，按照比较受认可的《高程》的说法是五种数据类型，其中null和undefined分别为一种，特别注意的是number类型这里坑很多 Bootstrapcss框架 grid layout version 3.4 浮动实现 宽度百分比 version 4.3 flex 利用flex特性 Javascript值，类型，运算符five basic types of values in JavaScript: numbers, strings, Booleans, null, and undefined values. 使用typeof (null)返回的是object number js使用64位固定长度存储数字，其中一位表示正负，一位表示小数点位置。 浮点数在计算机中的存储方式 补充： 对于64位双精度的11位符号位，是采取移位方式存储的，范围为(-1023 - 1024)，即(2^11 -1)加上E的值 特例： 0 在浮点数中特殊存储为全0，-0首位为1。infinity：指数全1，尾数全0。NaN：指数全1，尾数第一位为1 How numbers are encoded in JavaScript 1位符号位，11位指数位(exponent)，52位数值位，最大的数为2**53 -1, 再大的数就要占用exponent位，此时+1不会影响数值，因为相当于向左移了一位，最后一位补零，而数值位只能有52位 存储的小数用二进制表示时可能会丢失精度(超过64位) 所有的数字类型,在JavaScript中,都是双倍精度的浮点数类型，每一个数字,都是使用64位(8字节)来存储 对于位运算, JavaScript会首先把浮点数转换成32位的整型来进行处理,而不是直接对浮点型进行操作.准确的来说,是转换成32位,大端序, 补码, 有符号的整型，因为整型不能表示小数，转换时会把小数部分抹去。转换时整数部分超过32位则保留右边32位转换过程是将52位数值位的前20位抹掉，32位有符号整型的第一位作为符号位，此时负数为补码形式存储。位运算之后再转为64位，负数补1，正数补0 了解 JavaScript 的 Number 类型 special numbers Infinity 超过能存储的最大值的数字 -Infinity NaN not a number 无意义的结果以及NaN参与运算的结果 stringsJavascript使用UCS-2编码，所有字符在这门语言中都是2个字节，如果是4个字节的字符，会当作两个双字节的字符处理http://www.ruanyifeng.com/blog/2014/12/unicode.html 单双引号没有区别 字符串只能放在一行，所以不能出线明文回车 Boolean 比较 字符串比较： 按照字母顺序第一个能比较的字符按ascii值比较决定大小 console.log(NaN == NaN) // → false //Infinity的比较也是false，因为无穷大不一定精确相同 逻辑 自动类型转换(隐式类型转换) == 两侧存在null或undefined时，只有两边都为null或undefined才为true 布尔类型转换： 0, NaN, “” 视为false === !== 严格比较，不会发生类型转换 boolean == string 永远为false +号运算符作为一元运算符时，Expression将进行ToNumber()操作 加号运算符详解 在new Date()前面使用一元加符号，可以把日期字符串，转换为日期毫秒数 a++ 会将a的数据类型转为number 逻辑运算符短路特性 当 || 和 &amp;&amp; 两侧表达式返回的不是布尔值时触发短路特性 || 左侧可以转为true时返回左边的值，用于添加右边的默认值fallback，当左边为false时返回默认值 &amp;&amp; 左侧可以转为false时返回左边的值，左边为true时返回默认值 只要左侧返回，右边会被直接忽略 Others 位运算 只有整数才能做位运算 | 按位或 &amp; 按位与 注意负数是补码形式 ^ 按位异或 ~ 按位非 &gt;&gt; 按位右移 保留符号位(负数左边补1，正数补0 &gt;&gt;&gt; 按位右移 不保留符号 (都补0) &lt;&lt; 按位左移 右边补0 逗号运算符：逗号运算符的作用是将若干表达式连接起来。它的优先级是所有运算符中最低的，结合方向是自左至右，返回最后一个表达式的值。请注意：并不是所有的逗号都要看成逗号运算符，如在函数调用时，各个参数是用逗号分隔开的，这里的逗号并不是逗号运算符。 void运算符：出现在操作数之前，操作数正常计算，但忽略结果返回undefined 程序结构 当一行的开头是+，-，/, [ , ( , ` ，前一行必须加分号 ，可以把分号写在这行开头，其他时候建议不写分号JS的自动分号插入机制 所有不在引号里且不为保留字和标识符的都是变量 变量名只能以$ , _ ,字母开头，可以包含数字，不能包含空格和其他ascii码范围内的符号 在控制台所有表达式都有一个返回值 注意isNaN()和Number.isNaN()的区别 isNaN() ： 是否不是数字类型，这里非常奇怪，因为NaN自己就是数字类型 Number.isNaN() ： 是否是NaN这个值，除了NaN都返回false Js语句和表达式的区别","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"},{"name":"javascript","slug":"javascript","permalink":"babopo.github.io/tags/javascript/"}]},{"title":"写给新手看的stylus简单教程","date":"2019-06-12T15:05:53.000Z","path":"2019/06/12/写给新手看的stylus简单教程/","text":"​ 学css那肯定就离不开预处理，预处理的作用相当于在css上面再套了一层壳，用更简洁更高级的方式来写样式，剩下的就交给编译器编译成css代码，但要记住预处理只不过是工具而已，能不能写好是建立在css的基本功学扎实的基础之上的，特别是进入css3时代，原生css即能方便实现的功能越来越多，预处理显得又不那么重要了，但是后面学习使用框架时似乎能用到，那么还是好好学习一下，这篇文章的是写给像我一样刚接触css时看到预处理器的文档一脸懵逼不知道如何下手的同学，顺便记录一些能用上的奇技淫巧。 这里选择了相对冷门的stylus，因为写起来不需要花括号，分号甚至不需要声明的冒号，写起来相当优雅简单省事 嵌套嵌套是预处理器最有特色的东西了，在stylus中是利用缩进实现的层层嵌套，编译时会从最外层的选择器一直到最里层，但要注意的是嵌套随然好用，但是最好不要超过2层，因为css中尽量不要体现html中的结构 &amp;这个符号相当重要，它是缩进使用的，代表其被嵌套的父选择器，其实就是一种省略的写法。 其实有了嵌套和&amp;,就已经可以完成大部分的工作了。接下来算是一些高级点的用法 Mixin混合，其实就是其他编程语言中的函数，在需要调用的地方打上函数名，编译时会自动加入自定义的内容 @extends在其他选择器下使用@extend [name]可以将[name]选择器下的所有属性都加入。 循环循环生成多个选择器 for $num in (1..100) .a-{$num} color red &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 以上代码生成 .a-1 { color: #f00; } .a-2 { color: #f00; } .a-3 { color: #f00; } 通过这种方式我们可以快捷生成多个用数字排序的选择器 主要有一下几个点： 变量前加$是为了与正常字符串区分，可以不加 拼接字符串使用{} 循环范围使用(1..10)两个小数点，且包含1和10","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"},{"name":"stylus","slug":"stylus","permalink":"babopo.github.io/tags/stylus/"}]},{"title":"前端学习week6","date":"2019-06-06T14:30:47.000Z","path":"2019/06/06/前端学习week6/","text":"​ 本周继续学习了CSS3的一些重要属性，重点有以下几个：列布局，渐变，2D/3D变换，还有渐变及动画。列布局与flex相比的优势在于实现一些单元素的多列布局，更类似于报纸杂志等文字排版。渐变主要应用于背景图片的颜色渐变，注意与混色模式搭配可以生成一些很有意思的效果。transform，transition及animation搭配生成页面中的动画效果，注意变换是不影响布局的，渲染的元素会默认覆盖在其他正常元素之上，渐变及动画的区别在于渐变是用时间控制，而动画是用帧来控制，且动画可以实现无限循环的动画。CSS3的基本概念的学习到这里应该就告一段落了。 CSS3multiple column column-count: columns;将块元素折断 不能折断inline-block/inline 图片可以 break-inside: avoid-column; 可设置不折断 column-width不支持百分比与负值值 column-fill: ; balance 默认 auto 同时设置column-count和column-width，前者作为最大列数，后者为每列最小宽度，可以都转化为count，哪个小哪个生效 column-gap 支持百分比 column-rule 列间边框样式，不影响布局 border and box effects border-radius border-top-right-radius 先垂直方向再水平方向 百分比值/具体数值 大于元素高度或宽度时会等比缩小 百分值分别为高度和宽度的百分比 border-image opacity &amp; color 添加opacity属性会触发图形加速 未设置z-index且设置过opacity的图层会盖住其他内容，实际上是渲染成了一张图片 gradients linear-gradient值生成的是图片 用于background-image linear-gradient(deg/direction, color1 color-stop, color2 color-stop) color-stop写像素值是这个color-stop距开始的位置，若这个值小于前一个color-stop则会被重置为前一个的值 repeating-linear-gradient radial-gradient conic-gradient transformations 2D transform: func ; rotate() translateX/translateY/translate(X, Y) 取百分值为自身的宽高 scaleX/scaleY/scale(X, Y) value为缩放倍数，负值翻转，坐标轴的刻度也会缩放 skewX/skewY/skew(X, Y) 倾斜 matrix(a, b, c, d, X, Y) 坐标变换 ，前四位矩阵，后两位平移 https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/ 不影响布局，但是会盖住其他元素 渐变时若函数名和数量相同，则每个函数值单独渐变，否则直接变化（未设置的值会被重置为默认值） 平移尽量使用transform，显卡图层直接渲染，速度快 transform-origin: value; 不动点 3D x-axis向右 y-axis向下 z-axis向外 z-axis随元素旋转变化 rotateX/rotateY/rotateZ rotate3d(x, y, z, angle) perspective 景深 “viewport” 沿z-axis与xoy平面的距离 一般设置为1000px左右 不能与rotate属性分开写，会覆盖失效，且必须写在第一位否则会被忽略 单独写在父元素中相当于给每一个子元素增加属性 值为0或none时相当于不观察该元素，元素投影在父元素上，0和none有一点区别但我不知道为什么 scaleZ martix3D perspective-origin: x, y;“viewport”原点在xoy平面位置 transform-style: preserve-3D 更符合实际，用在变换元素的父元素上 backface-visibility: hidden;更符合实际，使后面元素不可见 transition &amp; animation transition transition-property 默认为all transition-timing-function: value; 距离时间函数 ease/linear/ease-out/ease-in-out cubic-bezier(x1, y1, x2, y2) 应当抽时间好好学习一下贝塞尔函数https://www.zhangxinxu.com/wordpress/2014/06/deep-understand-svg-path-bezier-curves-command/ steps() transition-delay可以为负值，动画直接从中间开始 animation @keyframes from = 0% to = 100% animation-iteration-count 迭代次数 infinite animation-direction normal 重复时直接从结束帧跳到开始帧 alternate 重复时从结束帧反向播放 animation-timing-function steps() animation-fill-mode none / backwards 动画前为0%状态 / forwards 结束时保留100%状态/both animation-play-state: running/paused 实现切片轮播图： https://tympanus.net/Tutorials/CSS3SlidingImagePanels/?tdsourcetag=s_pctim_aiomsg 零碎知识 给body设置overflow: hidden不能触发BFC 原因：overflow:visible以外的块级元素将创建BFC，除非该值已经扩散到了视口。 https://segmentfault.com/q/1010000002645174 div么有内容，只有width且height为0时，transform-origin为最左侧 max-content/min-content https://www.zhangxinxu.com/wordpress/2016/05/css3-width-max-contnet-min-content-fit-content/ width属性的值 min-content的包裹性(块元素绝对定位，浮动，inline-block时的宽度)，max-content使所有内容不这行 background-blend-mode filter blur( x px) 模糊效果 一定要记住： 给元素绝对定位或者浮动会使其自动变为block 使用transition等变化时最好两边都申明属性，否则可能不出现或出现奇怪的效果 input:submit/buttom比input:text默认高一点，是因为按下动画 text-align对最后一行文字无效 忽略外层div使鼠标点击穿透： pointer-event: none; 给包含块设置 边框 和 内边距 可以使子元素包含在内而不与父元素产生外边距折叠 媒体查询不能引入css，也不建议这样做 display: content; 浏览器会将所有将 display 设置为 contents 的元素从可访问性树]中移除。这会导致该元素及其后续元素不再被屏幕阅读技术访问。 布局/位置和其他样式尽量分开处理，CSS组件应当减少受到html结构的影响https://blog.zfanw.com/css-architecture/ 绝对定位的宽高是根据包含块的(content+ padding)的和计算的(不包含border)，与box-sizing无关！！ 伪元素中怎么添加换行符 JavaScript 小记 js中用getElementById.value方法获取的值的运算可以用在末尾加|0的方法使其从string 变为 integer Switch case 使用严格比较（===） Switching 的细节 如果多种 case 匹配一个 case 值，则选择第一个 case。 如果未找到匹配的 case，程序将继续使用默认 label。 如果未找到默认 label，程序将继续 switch 后的语句。 除了空字符串””，其他字符串转化为布尔值都为真 JavaScript 使用 32 位按位运算数 JavaScript 将数字存储为 64 位浮点数，但所有按位运算都以 32 位二进制数执行。 在执行位运算之前，JavaScript 将数字转换为 32 位有符号整数。 执行按位操作后，结果将转换回 64 位 JavaScript 数。","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"}]},{"title":"前端学习week5","date":"2019-06-01T08:51:07.000Z","path":"2019/06/01/前端学习week5/","text":"​ 本周学习了CSS3中的一些新属性，本周有三个重点，1. 媒体查询：主要应用于移动页面的自适应，理解设备像素和CSS像素(设备独立像素)的区别和关系。2. flex布局，flex的使用大大简化 了很多复杂页面布局的工作量，细节也相对较少，display: flex的元素自动升级为块元素，而内容item则没有行内和块元素之分，可以理解为结合了浮动和inline-block的特性。 3. @font-face规则，利用这个规则可以引入字体图标，可以减少图片资源的加载还能自定义字体名字。 CSS3media query 使用媒体查询的三种方式 CSS内的媒体查询不影响选择器优先级 DPR device pixel ratio physical pixel / css pixel 单位： DPI DPCM DPPX(常用) D: dot &lt;meta name=&quot;Viewport&quot; content=&quot;width=device-width&quot;&gt; 让手机浏览器以设备屏幕宽度的初始包含块渲染页面，不设置一般是1000左右，仅支持移动端 width后设置的是设备渲染的css像素宽度，不用写单位 css像素也叫做设备独立像素(device-independent pixels (dips)) http://www.ayqy.net/blog/%E5%AE%8C%E5%85%A8%E7%90%86%E8%A7%A3px-dpr-dpi-dip/ 手机上缩放页面永远不会回流，用户缩放的时候css像素(例如width)是不变的，只是改变了DPR 移动端布局 一般两种情况： 页面在不同设备上显示比例一致 使用vw单位 使用meta viewport标签定宽 以上旧版浏览器不支持时，使用rem单位，用js获取视口宽度，使用100vw/(dips页面宽度)作为1rem的大小html {font-size: 100vw/x} x为逻辑页面大小，但要注意字号大小小于12px时会被浏览器强行重置为12px，所以需要将单位放大至12px以上，相应的rem使用时缩减相应倍数 页面在更大的屏幕上显示更多内容 width=devic-width使用px以及流式布局(块元素自动占满宽度) 混合页面 布局使用rem，文字使用px，width=devic-width pseudo-class&amp;pseudo-element :target伪类：url中含有元素的id的值时选中 :not()伪类中不能出现层级选择器即&gt; ~ +以及空格等 且not伪类在选择器中权重为0，但是not伪类里面的东西参与优先级 ::first-letter伪元素会选中第一个文字字符前的所有符号字符 flexible box layout display: flex声名内部为flex，外部为块 inline-flex flex-container flex-direction 设置main-axis column /column-reverse row 默认值 justify-content 是item元素main-axis对齐 flex-start/flex-end center space-around/space-between align-items 在cross-axis上对齐 子元素本身在交叉轴的对齐 flex-start/flex-end center baseline stretch 默认值 设置为其他值时则失效 align-content 设置行间的空间，与justify-content值相同，只有一行时无效 子元素整体在交叉轴对齐 flex-wrap 设置cross-axis 发生折行 shrink失效 ，折行时不会发生外边距折叠 flex-flow ： direction | wrap flex-item flex-basis 对应行排列时的width或列排列时的height，比较灵活，item的理想大小 content &lt; width &lt; flex-basis (limited by max|min-width) 优先级 flex-grow: 对container剩余空间的分配拉伸，若所有item中的值之和不超过1，那还会剩下1减去和的比例部分未分配 flex-shrink 缩减对应比例权重使items fit container，默认为1，具体收缩的值为各item初始宽度乘以权重再在多出的宽度下分配，和不足1时与grow类似 align-self 交叉轴上的对齐 order 顺序默认为0 理解flex-item的min-content 看到zxx的文章https://www.zhangxinxu.com/wordpress/2016/05/css3-width-max-contnet-min-content-fit-content/ 说一下自己的理解：flex布局自带shrink为1，而flex-item有一个最小内容宽度，一般被子元素的内容撑起，例如只有文本内容且为文本样式为nowrap时，最小内容宽度为最长的单词长度，内容为替换元素图片且未设置图片的宽度时，最小内容宽度即为图片的宽度(DOM结构为container&gt;div&gt;img，div作为flex-item有包裹内容的性质)。当最小内容宽度的和大于container的宽度，此时flex-item也无法再被压缩，表现为溢出。一个有意思的情况是在图片作为item的内容的情况下，当给图片设置max-width: 100% ，相当于flex-item的最小内容宽度的限制取消了，此时会依照shrink的规则来对flex-item进行压缩。 当图片宽度比容器小的时候设置了max-width会怎样：flex布局可以理解成若item的shrink为0时先将元素按本来属性摆放，再按设置的shrink或grow等其他属性来伸长或压缩。所以会直接按图片的尺寸摆放 flex container在 column warp时宽度不能被items的内容撑开，可以在末尾使用伪元素来填充剩余的空间使形成完整的矩形 https://output.jsbin.com/topegiw 利用flex实现自适应的正方形阵列，利用了伪元素的padding百分比值为父元素宽度的特性撑起父元素高度及grow属性实现自适应大小的正方形，增加几个高度为0的正方形元素使当最后一个行未铺满正方形时其大小不会过分拉伸 子元素可以用margin:auto 实现两端对齐， 设为auto的margin会占用这个方向剩余的所有空间 web font @font-face { font-family custom name; src: url(); src: url() format(&#39;embedded-opentype&#39;), //ie8 above woff ttf ; font-style: ; font-weight: ; unicode-range: ; } /* custom name可以重复使用，引入斜体粗体等 @font-face分开写会造成第版本IE浏览器下加载多个字体请求。*/ font-size-adjust: number x的大小缩放 font-stretch 需要单独设计的字体文件 利用font引入icon 用图标，符号替代不需要的字符编码作为字体引入 unicode PUA(private user area) \\f000 之后，使用类名及伪元素组合可以给图标命名和防止读屏软件读出， svgtext effect &amp; typographic styles text-shadow text-overflow clip ellipsis 超出的文本用(…)表示，只能应用于单行文本 text-align :start/end 零碎知识 max-width可以设置为none而min-width不可以，可以给min-width设置为0达到想要的效果 如何调整input:text中placeholder文本的样式 使用::placeholder伪元素，但是不能调整垂直对齐，因为input内为 替换元素且为单行 border outline box-shadow 区别 border：占据空间 outline： 不占空间，只能为矩形，不能圆角，不能模糊，有outline-offset属性，从border外侧开始渲染 box-shadow：不占空间，形状跟随border，优于outline，从border内侧开始渲染，但是需要方框时可以用outline https://juejin.im/post/591e478b0ce4630069308278 FoUT (the Flash of Unstyled Text) 页面加载时间比引入的样式短，加载到样式时造成页面闪烁 解决方案： 把首屏的样式写入页面的style标签中 使用link标签放在页面上方而不是@import bacground-positon 百分值是图片水平或垂直方向的百分值位置对应元素的百分值位置 background-size的cover和contain不是数值属性，不能动画 background-origin的默认值是padding-box 不要忘记为替换元素（比如 img 、 object 、 video 、 iframe 等）设置一个 max-width ，值为 100% 。 无法给img等自闭合标签添加伪元素！因为伪元素是子元素","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"}]},{"title":"前端学习week4","date":"2019-05-23T14:27:05.000Z","path":"2019/05/23/前端学习week4/","text":"​ 学习时间一个月了，到了一个结点，css2.1的规范学习也结束，下周将开始css3的学习。先回顾一下上周的知识：上周的重点是盒模型，行内元素以及行内块元素的规则，还有定位布局，注意文本的一些属性在不同的元素下表现形式会不一样，例如对齐规则在表格中就相对直观简单。本周主要学习了另外两种原始的布局方法：表格，浮动。表格需要注意的是表层和边框优先级的规则顺序：td&gt;row&gt;col&gt;table。浮动摆放位置的规则和清除浮动以及闭合浮动的概念和方法。 元素居中方法inline 水平方向text-align: center即可 垂直方向 使用伪元素 .inline::after { content: &quot;&quot;; display: inline-block; height: 100%; vertical-align: middle; } &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 原理：画个图就明白了，vertical-align: middle的意思是使元素的中部与父元素的基线上的x中部对齐 可以利用表格的对齐特性 display: table-cell vertical-align: middle 多行文本垂直据中 div { min-height: 150px; line-height: 150px; } span { display: inline-box; line-height: normal; vertical-align: middle; } &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 绝对定位居中 margin: auto; top: 0; left: 0; right: 0; bottom: 0; 见：https://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/ 原理：当一个绝对定位元素，其对立定位方向属性同时有具体定位数值的时候，流体特性就发生了，即元素的外边距会扩大或缩小以适应父元素或画布的实际大小 过分受限自动填充父元素可用尺寸，注意正常流的margin:auto不能使垂直居中，而绝对定位中可以 flex子元素margin: auto或调整父元素的justify-content和align-items transform利用transform: translate();和position: relative 百分值的特性 唯一子元素大于父元素也能居中的方法 表布局 visibility中的collapse只对表格中的列生效，且列或列组的visibility只有这一个声明，整列隐藏。 匿名表对象 浏览器会自动补全遗漏的表格组件，可利用这个特性故意省略table，会自动补全一个&lt;div class=&quot;table&quot;&gt;，可以给表格增加滚动条 caption视为块级元素 合并单元格边框 表宽度是指两边框中线的距离 次像素 subpixel 边框优先级和表层的优先级是一样的，另外hidden优先级最高，none优先级最低，粗&gt;细，上&gt;下，左&gt;右 表层 所有颜色背景初始都是透明的，按顺序叠放，透过外层透明背景可以看到里层背景，td最高，table最低 表大小 高度永远自动计算 宽度 固定布局 自动布局 表格及单元格宽度由其包含的内容决定，要在整个表格后加载解析完成之后才能最终确定，如果某行的列宽和前面的不一致，则之前绘制好的行也必须重新绘制 table-layout 默认为auto即自动布局，使用fixed值时表格第一行渲染即确定单元格宽度，可以加速渲染 单元格width为百分比：参考https://csspod.com/table-width-algorithms/ 例：设置成1%？ 对齐 vertica-align: middle 单元格内容中间对齐，可利用这个特性实现垂直居中 base-line col无法使用hover伪类，可以使用伪元素利用表层特性实现行列高亮 回流和重绘https://www.cnblogs.com/chenjg/p/10099886.html reflow/relayout 页面样式变化涉及重新计算布局 尽量不要触发回流，控制在一定范围内 repaint 页面样式变化不涉及计算布局，只改变颜色背景阴影等 回流一定会触发重绘，而重绘不一定会回流 IE hack条件注释 浮动 可用来清除图片间的空隙 包含块是最近的块级祖先 给行内元素设置浮动会变成块元素 块元素会忽略浮动元素布局，但是行内元素会环绕浮动渲染 浮动不会影响前面块元素的布局 浮动框没有空间会向下向左滑动 朋友圈照片布局优化，调整li的数量观察效果 li:first-child:nth-last-child(3) 浮动和定位组合，只有position:relative生效，其他情况只有定位生效 浮动元素不会重叠 垂直方向不同包含块的浮动元素也不会重叠 水平方向的不同包含块的浮动元素会冲叠 浮动的负magin浮动块中内容的位置不会影响浮动布局盒子的位置，有点像定位中的relative。但是会改变布局盒子的大小，而浮动块的内容位置也是相对布局盒子的位置，当浮动布局盒子宽度为0时，位置会变为前面块元素的末尾，此时浮动块元素可以重叠，具体例子参见淘宝的双飞翼布局https://www.cnblogs.com/langzs/archive/2013/01/27/taobaoshuangfeiyi.html 清除浮动 清除浮动 clear 块级 让块框下移，使两边没有浮动元素 触发BFC，若块级元素在两个浮动之间，则变窄 闭合浮动 块框高度增大使包含其浮动的后代元素， 触发BFC： overflow 除visible以外的值 display: inline-block/table-cell/table/flow-root;position: absolute/fixed; float position: absolute/fixed 末尾使用一个行元素生成行框使其撑高 缺点：会有不需要的一段高度 末尾使用一个块元素clear:both使撑高，br亦可 优化：可使用after伪元素http://www.iyunlu.com/view/css-xhtml/55.html?tdsourcetag=s_pctim_aiomsg 常用示例： div::before, div::after { display: table; content: &#39;&#39;; } div::after { clear: both; } &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 列表 浏览器大多使用padding来实现列表项缩进，所以可以改变padding来调整缩进 list-style-tyoe属性会继承，但是用户代理的样式表可能有定义。 计数器 counter-reset counter-increment 浏览器第一次使用时会reset 伪类中:content: counter(name) 计数器可以定义列表样式：counter(name, list-styletype) counters(name, “.”) 老计数器追加新计数器，并用 . 连接 计数器有作用域，counter-reset确定了计数器的作用域 零碎知识 p标签内不能写块元素，遇到块元素标签直接闭合 行内元素不能包含块元素，也会直接闭合 这是旧标准的说法，新的html5中删去了block和inline的概念，能否嵌套应当查看元素的categories和content model 伪元素生成的内容无法选中 all: initial将所有属性还原默认值 例：用于去除inline-block间的间隙 html { box-sizing: border-box; } *, ::after, ::before { box-sizing: inherit; } 将所有元素设置为border-box的优化写法 opacity不继承 圣杯布局和双飞翼布局区别 圣杯布局：借助的是其他非主要元素覆盖了其父元素的padding值所占据的宽度，同一个杯子，非主要元素其只是占据了全部容器的padding值部分； 双飞翼布局：给主要部分main-wrap添加一个外层元素main，其他非主要元素所占据的空间是主要部分(main-wrap)的margin空间，像鸟的两个翅膀，与主要部分main脱离 双飞翼布局多了一个DOM节点，但是布局也更稳定","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"}]},{"title":"前端学习week3","date":"2019-05-18T04:01:03.000Z","path":"2019/05/18/前端学习week3/","text":"本周开始学习css的布局基础知识，基本视觉格式化从盒模型入手，介绍了块元素的盒模型及基本概念，水平方向和垂直方向的规则和要点很多，注意水平方向的width总和和垂直方向的margin折叠学习这些内容能方便预测页面中的基本布局，之后学习了背景图片的一些技巧和sprite图应用，接着是基本布局之一的定位，最后是行内元素的结构，注意行内框，行框，line-height的关系，内容很多很杂，需要梳理。 基本视觉格式化盒模型 所有元素都有盒模型，只不过行内元素的宽高上下外边距设置无效 无法通过元素的margin box部分与此元素交互 padding/border不能为负值 只有width/height/margin可以设置为auto box-sizing 默认为content-box 建议设置为border-box 利用border的特性使用css画出多种几何图形 http://www.webhek.com/post/40-css-shapes.html border默认为前景色 即文本的颜色 包含块：最近的块级祖先 常规流normal flow 水平属性 内容，左右外边距可以设置为auto 块级元素框水平总和等于父元素内容区width(不是width属性的值！！) 百分数也是 水平方向外边距不会折叠 没有auto 过分受限会把margin-right强制为auto(与文本书写方向有关) 一个auto 根据父元素计算出值 只有margin-left为auto时，不能计算出负值，会自动置0，负值给margin-right 两个auto(margin-left/right,width) margin-left/right 元素在父元素中居中 margin/width 设置为auto的外边距为0 三个auto 两个外边距会被设置为0 替换块级元素的宽度为auto时则为内容的固有宽度 边框宽度不能用百分比表示 利用min-width/max-width属性 垂直属性 浏览器渲染规则：自上而下，自外而内，静态渲染，一次到位 默认高度由内容决定 margin-top/bottom都为auto时会自动设为0，不会居中 height必须设置为auto或者非负值 常规流中，margin/padding的水平和垂直方向的百分数值都是基于包含块的内容区width计算的 若包含块height设置为auto且高度由内容撑大，子元素height设置的百分数会失效 特殊情况：包含块只设置了min-height，有高度但子元素高度百分比依然无效 解决方法： 将包含块设置具体高度 包含块的高度不由子元素撑大，例如子元素设置为绝对定位 外边距折叠 只在垂直方向 保留两者中较大的外边距 负margin和正margin相遇时两者相加得到新的外边距 两个负margin重叠也只保留绝对值较大的 多个margin接触时，正与负分别合并，最后正与负求和 常规流块元素没有边框和内边距且只包含块元素时，包裹子元素的 border-box，父子元素的margin会合并，但触发了BFC的元素，无论如何都会内容区包裹子元素的margin-box，父子元素的margin也不会合并 BFC 列表项 块级元素 隐藏元素 visibility: hidden 元素不可见，不可交互，但是仍占据布局中的位置 opacity: 0 元素透明，但是可交互 display: none 元素从布局中完全消失 颜色和背景 背景不继承 背景图片无法直接复制 背景颜色默认在border以内的区域包括border 背景图片： background-repeat background-size 元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。 以background-origin为基准 ，默认为padding-box，即背景图像一定是从padding开始摆放，如果不使用no-repeat，则背景图像会覆盖至包括边框 cover 图片由无穷大等比缩小到正好覆盖元素 contain 与cover相反 object-fit img/video的属性 background-attachment fixed 相对于视口定位。 可产生特殊的效果 background-position 值可以写关键字，配合数值 百分比：位置为box的百分比对准图片的百分比位置，注意图片比窗口大的时候增加百分比图片如何移动？ background-clip 定位 position static 默认 fixed 相对视口 上下/左右margin设置为auto可以居中 默认位置为原先在常规流中的位置 relative 相对自己原来的位置 常规流会保留原来的位置 absolute 相对定了位的最近祖先的padding-box(无定位祖先则相对第一屏) 宽度未设置时，最大到包含块的border，最小为一个单词长度，可设置white-space使不折行 sticky 不会离开包含块，结合了relative和fixed 的特性 z-index 默认0，后盖前 祖先后代都定位时，后代的z-index失效 transition 过度动画 cubic-bezier 与visibility组合时，注意visibility只要离开hidden状态就会visible，并不是渐变 行内元素 垂直方向内容区相连，有边框的话，边框会重叠显示 行内框是由行内元素产生，行框则是一行中所有的行内框构成 box-shadow是元素折断之后生效，border是折断之前生效，可以利用这个特性为多行文本的每行增加边框 行内元素垂直方向margin不影响布局 line-height值尽量写纯数字，用em容易产生奇怪的结果 只要行框形成就不会消失 给行内元素增加边框和padding不会影响行内框等布局，初始边框包围内容区 替换元素内容区包括外边距 line-height可视为确定了行框的最小高度 将行内元素的line-height设置小于normal失效：会假设行内元素旁白会有一个空的匿名文本，行高继承自块元素 inline原色无padding和border时，其底色区域的高度为当前字体line-height为normal时计算的值，与实际设置的line-height无关 替换元素line-height属性无效 vertical-align的百分值是根据line-height计算 当包含块中只有行内替换元素时，例如只有一张图片，行框的计算要加上图片的行内款和相邻空白节点的行内框(假设改行有匿名文本) 视觉格式化流程 按照以下步骤确定行中各元素行内框以及高度： 获取各行内非替换元素及不属于后代内元素的所有文本的 font-size值和 line-height值， line-height和 font-size差值为行间距值。 获取替换元素高度及上、下外边距，上、下内边距，上、下边框值相加。 对于内容区，需要确定各元素、匿名文本以及该行本身基线的位置，将其基线对齐。对于替换元素，需要底边放置该行基线上。 对于指定 vertical-align 值的元素，确定其垂直偏移量。并改变元素在上方或下方超出的距离。 确定各行内框的具体位置后再进行确定行框。行框高度为最高行内框顶端和最低行内框低端之间的距离。 inline-block inline-block的元素之间会产生空格间隙间隙影响布局，解决方法见：https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/ 相邻的block元素中间产生匿名空格，让元素分行即可 行内框为margin-box的外边缘 基线为最后一行文字的基线/无内容时以margin-box的下边缘为准 替换元素设置为display:inline无效，会被当做inline-block inline-block的基线会影响布局，其基线取决于元素本身的特性，在该元素中没有行内子元素（注意是DOM树的子元素，有块子元素不算或者块子元素中有行元素这个行元素算）的时候或者overflow不为visible，该inline-block的基线为margin-bottom的下边界。否则，以该元素中最后一个行框子元素的基线为该元素的基线。 假设两个inline-block并列，第二个又嵌套了一个inline-blok，会怎样布局 解答：按照上面的规则，inline-block的基线为margin-box的底部，第二个inline-block的基线变成被嵌套的inline-block的基线，所以第一个和被嵌套的底端对齐。 匿名盒子匿名文本看作被包含在匿名盒中继承父元素属性 匿名块盒子 如果有多个块盒子，而它们中间又没有行内元素，则会在这些盒子的前面和后面创建两个匿名块盒子 如果块容器盒里面有一个块级盒，那么我们强制让它里面只含有块级盒 匿名盒子无法被选择器选中，可继承的属性都为inherit，不可继承的为initial 匿名行内盒 任何被直接包含在一个块容器元素中（不在行内元素里面）的文本，必须视为一个匿名行内元素 不分行的就是行内盒，因为内部分块的叫块盒 块容器盒 该元素的直接子元素只能是块级盒，或只能是行内级盒 零碎知识 * { background-color: rgba(0, 0, 0, 0.08); } /*练习时css预写能方便看到各元素区域*/ &lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;Code&quot; data-labels_right=&quot;:&quot; data-labels_copy=&quot;Copy Code&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;a class=&quot;code-caption-copy&quot;&gt;Copy Code&lt;/a&gt;&lt;/p&gt; 伪元素可看作该元素的元素 伪元素不能交互 改变分隔线hr的颜色 hr { /* 如何改变hr的颜色 */ background-color: rgb(211, 213, 213); border: none; height: 1px; } /* 直接改变border-color会变成2px高度，因为有上下两边框 */ 设置html的width为100vw是包括滚动条的，设置为100%则不包括，默认即为100% html默认的overflow为auto 而要设置块元素height100%显示，必须设置其包含块的height，否则无效","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"}]},{"title":"前端学习week2","date":"2019-05-11T13:30:06.000Z","path":"2019/05/11/前端学习week2/","text":"​ 本周继续学习了html中剩余的常用标签，特别是表单，列表和表格的用法；理解什么是语义化；并进入css的学习，本周的重点是css选择器的种类和优先级，介绍了颜色，长度等数值和单位的用法，以及字体和文本属性的声明。 html 常用标签 i 语义： 用来表示由于某些原因需要与普通文本区分的文本 strong em 语义都为强调，strong更强一些 pre 块级标签 有预定义格式的文本 标签内文本格式都会保留 与code(行内标签)标签配合显示高亮代码 列表 ol - ordered list ul - unordered list li - list item dl - desciption list dt - description term dd - description description 一个列表项由一个dt和多个dd为一组 一个dt对应多个dd dd和dt是同级元素，不是嵌套关系 可访问性 accessibility - a11y internationalizition - i18n 各个设备访问/各种人群 a r i a 属性 accessibly rich internet application 和role属性组合使用，提示浏览器当前元素是一个何种视觉元素 aria-xxx=”yyy” 提示浏览器单枪视觉元素的状态或其他信息 表单 form 最外层标签 属性 action 表单提交地址 target method 表单提交方式 get 将表单字段拼成querystring http://abc.com/?a=1&amp;b=2&amp;c=3 组合成：表单地址?”name=”表单内容1&amp;”name”=内容2&amp;… post enctype 编码方式 input type属性 file accept属性组合使用 可以接受的文件类型 &lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; accept=&quot;image/*,text/*&quot;&gt; MIME Type 媒体类型 &lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; accept=&quot;.jpg,.png,.gif,.jpeg,.webp,.exe&quot; value=&quot;c:/user/xieran/desktop/a.pdf&quot;&gt; multiple 选择多文件，布尔值 hidden 存放一些用户不可见、不可改的数据，在用户提交表单时，这些数据会一并发送出 隐藏的输入域 value设置其值 name设置名字 不能识别的值一律当text处理 其他属性 value datetime-local https://zh.wikipedia.org/wiki/ISO_8601 name 很重要，表单提交时，这个域/字段/框/FormControl的名字 同时，在radio和checkbox阵列里，name相同的元素被分在一组里 可以作为内联元素放入label标签 button label 通过for属性连接其他元素或直接嵌套，使文字可互动 select option value 选择了该项目后它所属的select元素的值 selected 默认被选中 disabled 表示该项被禁用 hidden 表示该项被隐藏 以上三个属性均无值 optgroup // hgroup colgroup 给option分组 用label属性表示这个分组的名字 无法被选中，只能选择option textarea 多行文本输入框 fieldset 字段组，把一组输入域放在一起 legend 只能作为 fieldset 的子元素，用来标识这组输入域的名字 name属性主要用于表单元素 id所有标签都能使用 map “映射”标签 name属性 若设置id属属性，id和name属性值必须一样 子元素area table tbody 可以多个 tr 一行 table row th 表头/居中加粗 table header td table data colsapn 跨行 rowspan跨列 不能跨不存在的行列 thead 表头行 tfoot 表尾行 caption 表名 col/colgroup 设置列的样式 放在tbody/thead之前，caption之后 从上到下，从左到右 iframe inline frame 不能省略结束标签，否则之后的内容会被当做fallback后备内容不在页面显示 name属性 _top , _parent 自定义 iframe的跳转也会被浏览器记录 html5标签不能用style标签引入css progress 进度条 https://www.zhangxinxu.com/wordpress/2013/02/html5-progress-element-style-control/ 语义化我的理解：应当用机器可读的语义来降低机器处理web内容的难度 语义化做的好的页面能方便人与机器理解 可维护性 搜索结果靠前（机器理解） 合适内容选用合适标签 合适的嵌套 元素合适的类名和id名称 标签分类 旧 块级 行内 https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories 下面是常见标签语义 p - 段落 h1,h2,h3,h4,h5,h6 - 层级标题 strong,em - 强调 ins - 插入 del - 删除 abbr - 缩写 code - 代码标识 cite - 引述来源作品的标题 q - 引用 blockquote - 一段或长篇引用 ul - 无序列表 ol - 有序列表 dl,dt,dd - 定义列表 zwj 零宽连字符 CSScascading style sheet 注释不能嵌套 层叠 冲突处理 样式继承 注意代码规范，减少git diff信息 替换元素 没有后代元素/标签/结点 指内容被其他不在文档里的内容替换的 非替换元素 内容直接出现在标签中间 元素显示角色 role display 块级元素 block display 属性可以改变显示方式 行内/行间/内联元素 inline 引入html style标签 link标签 media属性 显示介质 all 默认 print 打印 … 内联样式 DOM @import指令 @import &quot;xxxx.xx&quot;; 只能出现在开头，可以有多个 树状依赖，导致串行下载 选择器 声明的属性和值必须是支持的，否则会被用户代理忽略 标签/元素 类 id id只能是一个单词，中间不能有空格 属性选择器 [xx] {} [href$=&quot;.pdf&quot;] {}以.pdf结尾的href属性 [href$=&quot;.pdf&quot; i] {}以.pdf结尾的href属性，且不区分大小写(case insensitive) [href^=&quot;a&quot;] {}以a开头的href属性 [href*=&quot;abc&quot;] {}连续出现abc的href属性 [href~=&quot;abc&quot;] {}出现abc单词的href属性 类名以 bs- 开头的元素[class^=&quot;bs-&quot;], [class*=&quot; bs-&quot;] { background-color: yellow; } [lang|=&quot;en&quot;] {}相当于[lang=&quot;en&quot;], [lang^=&quot;en-&quot;] {} 层级选择器 后代选择器 div p {} 子元素选择器 div &gt; p {} 邻接选择器 div + p {}紧挨div的p 若有多个这样的组合则可选多个 div ~ p {}div后所有兄弟p 选择器分组 p,div,h1 {}; *通配选择符 复合 类选择器 .foo.bar {}选择foo&amp;&amp;bar 伪类选择器 pseudo class 链接伪类 :link :visited 安全问题大部分属性无法设置，也无法获取颜色 动态伪类 :hover :active :focus 顺序LVFHA 位置伪类 括号中n一定要写在前面 :first-child p:first-child 选择p，且p为第一个子节点 p :first-child 选择p里面的所有第一个子节点 :last-child :nth-child(1) 若有元素内嵌套多个标签，则嵌套的标签中对应位置也会被选择 :not() 单一条件 :first-of-type :only-of-type 优先级 从上至下，每有一项加一 0,0,0,0 内联样式 id 类/伪类/属性 元素/伪元素 优先级一样，后出现的更高 通配符*优先级为0 连接符 无优先级 ！important p {color: red !important;} 有与important冲突的属性，important都会占上风 important比内联样式优先级高 继承没有优先级，比通配符还小 同一个选择器内的属性，后出现的生效 属性的值不会合并 值和单位 颜色 十六进制表示法 hex 缩写 rgb hsl 长度 绝对 m，cm等 相对 px 为什么：屏幕的总像素数可以由用户指定，与ppi不是一回事 常用于边框和定位，图像大小 em 最常用 相对父元素字体大小 ex 字体中x字母一半的大小 rem font size of the root element 指相对于根元素，一般是html，的字体大小，常用于web app自适应布局 vw视口宽度，vh视口高度 视口包含滚动条 calc 字体 字体族不加引号 font-size默认继承的是父元素的计算值而非书写结果 font 文本属性 缩进 水平对齐 垂直对齐 适用内联元素 text-decoration 子元素无法去掉父元素留下的线 线的位置粗细样式都不能指定，解决方案为使用背景图片","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"},{"name":"css","slug":"css","permalink":"babopo.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"babopo.github.io/tags/html/"}]},{"title":"前端学习week1","date":"2019-05-04T01:05:18.000Z","path":"2019/05/04/前端学习week1/","text":"一些前端的基本概念，没什么卵用 基础知识浏览器常见浏览器内核 webkit blink gecko trigent 二进制 模拟信号 连续的信号 数字信号 离散的信号 图片格式 jpg，jpeg 有损压缩，压缩率高 照片 png (portable network graphic) 无损压缩 适合有大块相同颜色区域的图像，不适合照片 支持透明(Alpha通道) gif 只有256色(原图小于256色时是无损压缩) 支持透明，但只支持全透明和不透明 bmp 无压缩，无损 多种颜色数量的格式 体积大，不适合网页 psd Photoshop专用格式 webp google开发的格式 有损压缩 各方面强过jpg 适合移动端 命令行 GUI与CLI GUI - Graphics User Interface CLI - Command Line Interface 两者区别只在于形式不一样 概念 prompt 命令 提示符 裸命令 例：pwd 显示当前工作目录 pipe 管道符，将前一个命令的Output作为下一个命令的Input 例如：xxx | grep abc 过滤出含abc的输出结果 编码知识 ASCII表 记忆：10-换行 48-0 65-A 97-a Unicode 通用字符集 utf-8 针对Unicode的一种变长字符编码 BOM BOM是用来判断文本文件是哪一种Unicode编码的标记，其本身是一个Unicode字符（”\\uFEFF”），位于文本文件头部。 HTML嵌套规则 树状(递归)结构 标签 语义化 secmentic 语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。 即：合适的内容用合适的标签 事实上，即使是有些非自闭合标签（如p，li），在一些情况下也是可以省略结束标签的，而且，是完全符合html标准的 参考 https://www.w3.org/TR/html-markup/p.html https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories 缩进 indent属性 属性名大小写不敏感，属性值大小写敏感 当属性值没有空格和引号等特殊字符时，属性值完全可以不用引号包围 当属性值有复杂的引号时，考虑转义字符 一些通用/全局属性(Global Attributes) id name 标签名，主要用再表单类标签 title style 给标签内指定内联样式 class data-* html5中新属性，储存页面的私有自定义数据，会被用户代理自动忽略 例： &lt;li data-animal-type=&quot;鸟类&quot;&gt;喜鹊&lt;/li&gt; html entity 字符实体输入符号时，可能会与标签混在一起 两种转义(escape)格式 &entityName; &#entityNumber; 参考 https://dev.w3.org/html5/html-author/charref http://www.w3school.com.cn/html/html_entities.asp http://www.w3school.com.cn/tags/html_ref_entities.html 空白字符忽略 用户代理默认忽略文字间多余一个的空格，换行符全部忽略 可以用css改变忽略 可以用字符实体让空格不被忽略 例如&amp;nbsp;，但这不是真正的空格 常用标签 html 只能有一个 head https://github.com/joshbuchea/HEAD head内的内容不会显示在页面上 meta 元信息 title标签 仅纯文本 如果不出现在head内会自动移到head 出现多个的话仅第一个生效 页面图标 也可以不用一个标签设置，浏览器会自动读取网站根目录下的favicon.ico这个文件 body 如果在body或者html标签的结束标签之后又出现了其它的标签，则之前的结束标签就会被认为无效，浏览器会自动添加结束标签 base 基准 在标签之前加载的标签不会使用这个基准地址 &lt;base href=&quot;页面中所有相对路径的基准地址&quot; target=&quot;全局设置页面中所有链接的打开位置&quot;&gt; 必须以/即目录结尾，否则会把最后一个/的位置作为基准路径 target属性 _blank 新标签 _self 默认值 _parent 父窗体显示 _top 顶层窗体显示 h1-h6 一般页面不超过一个h1 seo (Search Engine Optimism) p a 语义是一个链接 绝对路径 相对路径 空的href连接到当前页面 类似的，img标签的空src属性也连接到当前页面 https://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/ download 属性 html5 表示点击链接将下载链接对应文件，而不是跳转，下载的文件以download属性的值来命名 只能下载自己网站的资源 这个属性能让点击下载完全由前端实现 img alt属性 alternate span 和 div 通用标签，是没有语义的标签 Git使用常用命令： git config git init 初始化本地仓库 git status 当前仓库状态 -s紧凑显示 git add xx 将修改/新文件提交到stage区 git commit -m “提交信息” 提交暂存区文件 git diff 显示详细文件修改状态，-staged显示暂存区文件改动 git log git merge git clone [url] git clone https://github.com/libgit2/libgit2 mylibgit 可将本地仓库名改为mylibgit git remote git push/pull git fetch git checkout git branch https://&lt;username&gt;.github.io/可以访问到&lt;username&gt;.github.io这个仓库里的资源 https://&lt;username&gt;.github.io/&lt;repo_name&gt;可以访问到repo_name这个仓库里的资源","tags":[{"name":"front-end","slug":"front-end","permalink":"babopo.github.io/tags/front-end/"}]},{"title":"搭建RSS自动推送服务","date":"2018-03-25T12:07:33.000Z","path":"2018/03/25/搭建RSS自动推送服务/","text":"利用Google app engine搭建自动推送RSS至kindle的服务 原repo：KindleEar 因为网络环境原因一直没有成功。心灰意冷下看到这篇文章： KindleEar 搭建教程：推送 RSS 订阅到 Kindle 记录非常详细，几乎涵盖了所有问题，故转载","tags":[{"name":"kindle","slug":"kindle","permalink":"babopo.github.io/tags/kindle/"},{"name":"rss","slug":"rss","permalink":"babopo.github.io/tags/rss/"}]},{"title":"win10下配置st3+Texlive+sumartraPDF的LaTeX环境","date":"2017-05-11T02:24:42.000Z","path":"2017/05/11/win10下配置st3-Texlive-sumartraPDF的LaTeX环境/","text":"安装sublime配置方便而Tex live相较Ctex更灵活且自定义程度高 sumatraPDF可配置为默认的pdf预览器，并内置了反向查找的功能，具体步骤略。 配置 在sublime中安装好LaTeXtools插件后，找出配置文件LaTeXTools.sublime-settings 将Tex live和sumatraPDF的安装路径添加环境变量后，找的settings中的texpath，distro和sumatra项按照提示修改，再找到builder项改为simple，即配置完成。 反向代理：打开sumartaPDf，在选项的对应处输入&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; &quot;%f:%l&quot; 并执行即可。 在编辑完文档后按ctrl+b即可保存并输出pdf。","tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"babopo.github.io/tags/LaTeX/"},{"name":"sublime","slug":"sublime","permalink":"babopo.github.io/tags/sublime/"}]},{"title":"Qt学习笔记","date":"2017-05-09T17:29:44.000Z","path":"2017/05/10/Qt学习笔记/","text":"想做一个GUI对验证码识别程序做同意的处理，又开了个新坑，并没有任何Qt的基础，Python相对C++比较简单，因此使用PyQt来做，本文为快速制作一个简陋的GUI程序的学习过程。 配置环境参见另一文中的末尾Windows下Pycharm+Anaconda+Opencv图像处理环境配置 设计过程可以参考另一系列教程PyQt5学习笔记01—-第一个窗口已经写的非常详细了 设计结果： 下面说说自己0基础学习时的问题： 由QT Designer设计好的UI执行Pyuic生成的ui代码会覆盖之前的，所以我们需要创建一个新的主程序通过调用UI程序来实现代码与界面分离，在主程序中添加功能。 主程序中新建一个类例如： Copy Code ``` python class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow): def __init__(self): super(recognizer, self).__init__() self.setupUi(self) ``` 其中def __init__(self)为窗口初始化的部分，信号连接，字体等设置放在这里面 自定义的槽函数也放置在class中 调用label来显示文字及图像信息 Copy Code ``` python self.label.XXXXXXXXX ``` 可以设置全局变量来记录之前打开的文件路径，程序结果等。 使用cxfreeze来打包生成可执行文件(to be continued) cxfreeze打包会生成很多库文件，不方便使用，可用pyinstaller打包成单一可执行文件","tags":[{"name":"PyQt","slug":"PyQt","permalink":"babopo.github.io/tags/PyQt/"},{"name":"python","slug":"python","permalink":"babopo.github.io/tags/python/"}]},{"title":"验证码识别研究","date":"2017-04-18T15:08:35.000Z","path":"2017/04/18/验证码识别技术研究/","text":"研究背景验证码(CAPTCHA) 最早作为卡内基梅隆大学的一个科研项目，Yahoo! 是CAPTCHA 的第一个用户。CAPTCHA 是“Completely Automated Public Turing test to tell Computers and Humans Apart”(全自动区分计算机和人类的图灵测试)的缩写，是一种区分用户是人类还是计算机的公共自动程序。在一个验证码测试中，由计算机生成一个问题并评判用户的答案，这个问题必须只有人类才能解答。由于计算机无法解答，回答出该问题的用户就会被认为是人类 。CAPTCHA 在网络上的大规模使用起源于 1999-2000 年 Yahoo 网站的账号注册。目前大部分网站都引入了验证码机制来加强网络的安全验证。通过对验证码识别的研究，能够及时发现验证码存在的安全漏洞，对设计出更加安全的验证码有参考价值，对图像处理，模式识别等相关领域也具有重要意义。 验证码识别的具体过程识别流程一般为： 本课题主要介绍验证码识别中常用的数字图像处理技术，研究对象为卡提诺社区的验证码，给出算法流程和识别结果，并对结果进行分析。 验证码示例及特点：从原网页下载了一万张待标注的验证码： 由观察可得此类验证码的特点： 每幅验证码字符由4位数字和英文字母组成，且字体种类不多 每个字符的颜色与背景的噪声颜色都不相同 字符没有粘连，便于字符分割 由以上特点设计的识别流程如下： 识别流程根据设计好的识别方案，从之前下载的验证码中选取了200张作为实验数据及模式识别的样本，具体流程如下: 颜色聚类验证码图像中字符间颜色不同且均匀，可通过颜色聚类的方法将字符分离。 主要使用K-means算法，原理： 从数据集合中选取K个点作为各簇的中心，计算集合中各元素到各簇心的距离，使距离最近的元素为一类，再计算各类的中心作为新的簇心，重复上述过程，直到簇心的位置不变。 将获取的RGB图换值LAB空间，由于LAB空间色域广且各分量间联系较小，更适合颜色聚类。 RGB原图： LAB空间： 将图像每个像素值的L,A,B三个分量为一组作为特征向量，用K-means进行颜色聚类，由于背景的噪声颜色较复杂，因此K值取的较大，取K = 40。 颜色聚类后(已按类标记)： 类图处理由于颜色聚类后得到的矩阵是对原图不同类的标记，因此将每一类的标记点置黑，其他点置白，可以得到K张类图，其中4张包含字符的类图，(K - 4)张包含各类的颜色的噪声图，省去了预处理中灰度化的步骤。 因为K张类图都有一定数量的像素数，且背景噪声中可能包含与待识别字符颜色相同的零星噪点，难以直接获得包含字符的类图。通过人工挑选出包含字符的类图，经过多次实验，字符的像素点数量大致在[70,500]区间。 对之前的K张类图做4邻域的连通域去噪，步骤： 扫描整张图像，将不同4邻域的连通域标记为不同数字，统计各连通域的像素点数，将小于70或大于500的连通域置白。 处理后得到的各类图像种类：空白的噪声图像，只包含字符的图像，包含与字符像素点数类似的噪声图像。 投影分割经由上述步骤获得的图像， 人工选取包含字符的图像，经过多次实验，得到字符像素长度和高度的大致区间为[7,25],[8,28]。 计算每一列黑像素点的总数，形成竖直投影波形，根据投影波形的过零点确定图像像素区域的边界得到宽度；同理计算每行的黑点数，可得到像素区域高度。将在区间外的类图剔除，最后得到的即为原图中的四个字符图像，由字符最左端的像素位置可确定四个字符在原图中的顺序。 但也可能存在与待识别的字符像素数及长宽都类似的噪声，如下图所示： 特征提取由于以上得到的各个字符大小不尽相同，为统一字符特征，将字符的大小已近邻插值的方式归一化至$28*28$的大小. 将作为实验数据的200个验证码分离出的字符手动分类，得到由24种字符组成的样本库： $$\\Omega = {2,3,4,6,7,8,9,B,C,E,F,G,H,J,K,M,P,Q,R,T,V,W,X,Y}$$ 其中部分字符有不同的字体，部分英文字符有大小写，但不影响识别且为简化识别步骤，故将其分为同一类。 对字符主要提取4*4的粗网格统计特征： 计算每个网格内的像素值占总像素值的比列，将这16个数据作为一组特征向量储存，以二进制储存对应的类别编号。 为提高识别率，增加了边缘特征： 对作图所示的字符使用Canny边缘检测得到字符的边界，如右图所示，统计左图黑点数及右图白点数，将比值作为特征向量的第17个数据加入。 字符识别及结果分析：对单个字符的识别采用 K 近邻(KNN)算法，该方法首先储存训练样本，计算测试样本和每个训练样本特征向量的欧式距离，若在所有的训练样本中，得到与测试样本最接近的的 K 个的样本出现频率最高的类别，则该样本也属于这个类别。多次实验后取K为4。 之前投影分割步骤中提到的出现与待识别字符大小及像素点均类似的噪声，使用KNN计算后得到的与样本最小距离偏较大，多次实验后，得到大致阈值。若KNN步骤中最小 距离大于该值的对象则舍弃，以此去除该类噪声。 另取100张验证码人工标注后以之前的样本库用KNN识别，正确的有92幅，识别率为0.92。出现错误的结果原因基本为字符缺少，应为预处理步骤阈值等需要调整。 已用程序标注好所有一万张验证码。 接下来的工作 校验程序标注的验证码 解决仍存在识别结果错误的问题 用Python重写程序以提高程序效率 st=>start: Start pre=>operation: 预处理 sp=>operation: 字符分割 re=>operation: 字符识别 e=>end st->pre->sp->re->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);st=>start: Start a=>operation: 颜色聚类 b=>operation: 噪声处理 c=>operation: 投影分割 d=>operation: 模式识别 e=>end st->a->b->c->d->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);","tags":[{"name":"Opencv","slug":"Opencv","permalink":"babopo.github.io/tags/Opencv/"},{"name":"Matlab","slug":"Matlab","permalink":"babopo.github.io/tags/Matlab/"},{"name":"图像处理","slug":"图像处理","permalink":"babopo.github.io/tags/图像处理/"}]},{"title":"Windows下Pycharm+Anaconda+Opencv图像处理环境配置","date":"2017-04-14T14:29:59.000Z","path":"2017/04/14/python-opencv/","text":"软件下载略 opencv 的库可以从这里下载： Unofficial Windows Binaries for Python Extension Packages 复制入/lib/site-packages Copy Code ``` python pip install *.whl ``` 进行安装 Anaconda是一个成熟的python科学计算发行版，包含很多常用的库，省去了很多麻烦 可以在这里获取licenses，并放入user/.continuum： licenses 有自己的控制台命令 Copy Code ``` conda conda -h ``` 可以查看帮助 Pycharm是功能强大的python IDE，虽然Anaconda有捆绑Spyder，但这款功能更强 PyQt5的配置由于需要编写GUI，与设计数据库的方式很类似，配置可参考Python3 PyQt5 pycharm 环境搭建 在from PyQt5 import 包时报错，原因是Python3.6(Anaconda)目录下缺少python3.dll文件，从官网下载embeddable包复制即可，参考python3.6.0(Anaconda)安装PyQt5，“DLL load failed: 找不到指定的模块 需要调用资源配置在pyrcc中配置，与配置pyuic类似，pyrcc5.exe文件再anaconda/scripts目录下","tags":[{"name":"PyQt","slug":"PyQt","permalink":"babopo.github.io/tags/PyQt/"},{"name":"Python","slug":"Python","permalink":"babopo.github.io/tags/Python/"},{"name":"Opencv","slug":"Opencv","permalink":"babopo.github.io/tags/Opencv/"}]},{"title":"Windows下配置Hexo+GitHub博客基本步骤及遇到的问题","date":"2017-04-14T12:48:20.000Z","path":"2017/04/14/Windows下配置Hexo-GitHub博客基本步骤及遇到的问题/","text":"初衷是想找一个成本低廉又能保存一些技术学习笔记的地方，免费的OneNote对代码输入非常不友好，因此想到这样一个折中的搭建个人博客的方法，hexo用于搭建静态博客非常方便，同时能使用markdown编辑文章，而GitHub的门槛也非常低，网上教程也很多，步骤和自己遇到的一些问题如下： 安装Node.js及Git从主页下载即可，配置好git 安装hexo打开终端，输入 Copy Code ``` bash npm install -g hexo ``` 等待安装完成，无法安装可设置npm代理 Copy Code ``` bash npm config set registry http://registry.cnpmjs.org ``` 创建Hexo文件夹在预备作为储存博客页面的文件夹内打开终端，依次输入 Copy Code ``` bash 1. hexo init #会自动创建git repo 2. npm install ``` 查看是否创建成功 Copy Code ``` bash 1. hexo generate #生成静态页面 2. hexo server #在本地启动 少用，由于路径的原因，会产生各种问题 ``` 浏览器输入默认的local:4000端口即可查看页面 创建GitHub repo注意repo名应当为username.github.io否则部署后会有问题 获取SSH密钥并添加打开终端，键入 Copy Code ``` bash ssh-keygen -t rsa -C \"xxx@xx\" #后为github账号注册时的邮箱地址 ``` 在User\\name \\ .ssh\\路径下找到id_rsa.pub 复制密钥，添加入GitHub的setting中即可 测试是否添加成功：打开终端，输入： Copy Code ``` bash ssh -T git@github.com ``` 成功添加会提示相应字样 ps：代理等原因会影响连接，例如 Copy Code ``` bash $ ssh -vT git@github.com OpenSSH_7.3p1, OpenSSL 1.0.2k 26 Jan 2017 debug1: Reading configuration data /etc/ssh/ssh_config debug1: Connecting to github.com [93.46.8.89] port 22. debug1: Connection established. debug1: identity file /c/Users/Limbo/.ssh/id_rsa type 1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_rsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_dsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_dsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_ecdsa type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_ecdsa-cert type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_ed25519 type -1 debug1: key_load_public: No such file or directory debug1: identity file /c/Users/Limbo/.ssh/id_ed25519-cert type -1 debug1: Enabling compatibility mode for protocol 2.0 debug1: Local version string SSH-2.0-OpenSSH_7.3 ssh_exchange_identification: Connection closed by remote host ``` 关闭代理即可 Hexo的配置和部署_config.yml为全局配置文件，在Deployment区域，修改为： Copy Code ``` bash deploy: type: git repo: github: git@github.com:username/username.github.io.git,master ``` 若要关联自己的域名令需添加CNAME文件 终端部署命令： Copy Code ``` bash hexo clean #清楚缓存 hexo generate hexo deploy ``` 在此之前可能需要输入 Copy Code ``` bash npm install hexo-deployer-git --save ``` 安装部署插件 至此，基本的配置工作已完成。 Copy Code ``` bash hexo new \"title\" ``` 可在source\\ _posts下生成“title”标题的新md文件 由于国内的特殊网络环境，访问已搭建好的页面需要输入https://username.github.io Hexo主题推荐一个主题yilia 也是本站正使用的，Reademe很详细也不再此赘述 绑定个人域名如果你有闲置的域名，可以将其绑定至刚配置好的博客页 在域名管理页的DNS控制中添加域名解析类型为A指向IP地址(在控制台中ping一下搭好的博客地址可以得到)或者添加CNAME指向域名，选择其一即可，不能同时添加 在source目录下添加名为CNAME的文件(无后缀)，内容为你要绑定的域名 修改_config.yml中的url为要绑定的域名，部署即可 关于写作在文章中加入&lt;!-- more --&gt;可以将文章截断显示在主页，防止文章过长 文章头的reward和comments分别为打赏和评论，值为True/False Copy Code ``` bash hexo new page xxx ``` 可以新建一个名为xxx的页面，以此做了一个留言板 以下是对yilia主题的修改，增加一些功能 跟帖及留言添加评论以及留言的功能，的功能，按照lawlite的方法并没有成功，因此改用来必力的跟帖 从来比力网站获取web代码后，在themes\\yilia\\layout\\ _partial下的article.ejs最后添加即可 例如： Copy Code ``` html (function(d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &#39;function&#39;) { return; } j = d.createElement(s); j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;; j.async = true; e.parentNode.insertBefore(j, e); })(document, ‘script’); 为正常使用来必力评论功能请激活JavaScript ``` 最外层的标签可以取消在主页和控制文章中显示跟帖 网站访问量功能在不蒜子获取代码后放入themes\\yilia\\layout\\ _partial下的footer.ejs中即可 在文章中插入音乐由于是在github上搭建的博客，直接从网易云获取的外链不支持https，从知乎搜索到一个解决办法 Copy Code ``` bash npm install --save hexo-tag-aplayer ``` 安装播放器插件 在A Flask Music Project. Demo项目中找到音乐链接，修改相应参数即可 在网易云音乐中找到对应曲目，然后生成外链。 代码如下： Copy Code ``` html ``` 效果如下：","tags":[{"name":"blog","slug":"blog","permalink":"babopo.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"babopo.github.io/tags/hexo/"},{"name":"git","slug":"git","permalink":"babopo.github.io/tags/git/"}]},{"title":"Hello World","date":"2017-04-14T03:24:52.222Z","path":"2017/04/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new postCopy Code ``` bash $ hexo new \"My New Post\" ``` More info: Writing Run serverCopy Code ``` bash $ hexo server ``` More info: Server Generate static filesCopy Code ``` bash $ hexo generate ``` More info: Generating Deploy to remote sitesCopy Code ``` bash $ hexo deploy ``` More info: Deployment","tags":[{"name":"Hello world","slug":"Hello-world","permalink":"babopo.github.io/tags/Hello-world/"},{"name":"随笔","slug":"随笔","permalink":"babopo.github.io/tags/随笔/"}]}]