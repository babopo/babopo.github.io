[{"title":"南京和乌镇以及我还没去过的地方","date":"2017-05-04T02:35:13.000Z","path":"2017/05/04/南京和乌镇以及我没去过的地方/","text":"虽然我是没有写日记的习惯，文笔也不甚好，不过既然有个自己的blog了，那我就随便写点东西好了 乘着五一假期，也不能说是乘着，毕竟对一个大四将要毕业的人来说，每天都是假期。约了钢门去南京玩，算算时间还有剩余就顺便去了一趟乌镇，走马观花式的。两个没啥文化底蕴的人，确实没法走到某个景点前，像某些人一样高谈阔论背后的历史背景，野史小故事blabla… 关于南京两天游玩下来，给我印象最深的大概就是人多了吧，从29号晚上在夫子庙秦淮河广场上被人推着走，到30号在中山陵南京大牌档吃饭排队，闷的人话都不想多说，人流密度简直逆天，只想着以后节假日绝对不能出来玩。在南京玩了什么我倒不想多说确实没玩什么，主要是个散心的地方，耐不住人多，要说的是真的要给票卡点赞，在一个陌生的城市有熟悉的人真好啊。 关于乌镇乌镇让我不止一次想起上个月去的宏村，宏村我觉得商业气息已经很重了，然而富庶的水乡开发程度果然不是山区小村落能比的，钢门一定很遗憾没时间去互联网大会会址吧哈哈，其实我也挺遗憾的，毕竟一开始是冲着这个名头去的。不过话说回来，乌镇确实漂亮，白天，黄昏，晚上，各有不同的美，布坊，陶坊，书院，月老庙，戏院…物质和精神生活都很丰富，以前生活在这个小镇的人一定很幸福吧。 后记在乌镇的时候跟钢门说以后还想去很多地方，还想去成都吃火锅，还想去台湾看台妹，还想去哈尔滨滑雪，等来年闲下来再说吧。其实这次最让我惊奇的是想约HT一块出来，结果他居然有妹子了，哈哈哈，等考完研了得去会会HT跟胡泽两个人生赢家。想起走之前晚上在南大附近的地铁站出口看到有个小哥弹吉他唱歌，等考上了我也要弄一把，Ukulele也行，以后弹给喜欢的姑娘听。","tags":[{"name":"随笔","slug":"随笔","permalink":"//limbotech.top/tags/随笔/"},{"name":"胡言乱语","slug":"胡言乱语","permalink":"//limbotech.top/tags/胡言乱语/"}]},{"title":"python+opencv学习笔记","date":"2017-04-18T22:19:04.000Z","path":"2017/04/19/python-opencv学习笔记/","text":"记录学习过程中的一些疑问 cv.imread() 有两个参数：第一个参数为要读入的图片文件名，第二个参数为如何读取图片，包括cv2.IMREAD_COLOR：读入一副彩色图片；cv2.IMREAD_GRAYSCALE：以灰度模式读入图片；cv2.IMREAD_UNCHANGED：读入一幅图片，并包括其alpha通道。默认第二个参数不填。 在Opencv下加载的图像是BGR格式，而在Matplotlib中是RGB格式","tags":[{"name":"Opencv","slug":"Opencv","permalink":"//limbotech.top/tags/Opencv/"},{"name":"Python","slug":"Python","permalink":"//limbotech.top/tags/Python/"}]},{"title":"验证码识别研究","date":"2017-04-18T15:08:35.000Z","path":"2017/04/18/验证码识别技术研究/","text":"研究背景验证码(CAPTCHA) 最早作为卡内基梅隆大学的一个科研项目，Yahoo! 是CAPTCHA 的第一个用户。CAPTCHA 是“Completely Automated Public Turing test to tell Computers and Humans Apart”(全自动区分计算机和人类的图灵测试)的缩写，是一种区分用户是人类还是计算机的公共自动程序。在一个验证码测试中，由计算机生成一个问题并评判用户的答案，这个问题必须只有人类才能解答。由于计算机无法解答，回答出该问题的用户就会被认为是人类 。CAPTCHA 在网络上的大规模使用起源于 1999-2000 年 Yahoo 网站的账号注册。目前大部分网站都引入了验证码机制来加强网络的安全验证。通过对验证码识别的研究，能够及时发现验证码存在的安全漏洞，对设计出更加安全的验证码有参考价值，对图像处理，模式识别等相关领域也具有重要意义。 验证码识别的具体过程识别流程一般为： 本课题主要介绍验证码识别中常用的数字图像处理技术，研究对象为卡提诺社区的验证码，给出算法流程和识别结果，并对结果进行分析。 验证码示例及特点：从原网页下载了一万张待标注的验证码： 由观察可得此类验证码的特点： 每幅验证码字符由4位数字和英文字母组成，且字体种类不多 每个字符的颜色与背景的噪声颜色都不相同 字符没有粘连，便于字符分割 由以上特点设计的识别流程如下： 识别流程根据设计好的识别方案，从之前下载的验证码中选取了200张作为实验数据及模式识别的样本，具体流程如下: 颜色聚类验证码图像中字符间颜色不同且均匀，可通过颜色聚类的方法将字符分离。 主要使用K-means算法，原理： 从数据集合中选取K个点作为各簇的中心，计算集合中各元素到各簇心的距离，使距离最近的元素为一类，再计算各类的中心作为新的簇心，重复上述过程，直到簇心的位置不变。 将获取的RGB图换值LAB空间，由于LAB空间色域广且各分量间联系较小，更适合颜色聚类。 RGB原图： LAB空间： 将图像每个像素值的L,A,B三个分量为一组作为特征向量，用K-means进行颜色聚类，由于背景的噪声颜色较复杂，因此K值取的较大，取K = 40。 颜色聚类后(已按类标记)： 类图处理由于颜色聚类后得到的矩阵是对原图不同类的标记，因此将每一类的标记点置黑，其他点置白，可以得到K张类图，其中4张包含字符的类图，(K - 4)张包含各类的颜色的噪声图，省去了预处理中灰度化的步骤。 因为K张类图都有一定数量的像素数，且背景噪声中可能包含与待识别字符颜色相同的零星噪点，难以直接获得包含字符的类图。通过人工挑选出包含字符的类图，经过多次实验，字符的像素点数量大致在[70,500]区间。 对之前的K张类图做4邻域的连通域去噪，步骤： 扫描整张图像，将不同4邻域的连通域标记为不同数字，统计各连通域的像素点数，将小于70或大于500的连通域置白。 处理后得到的各类图像种类：空白的噪声图像，只包含字符的图像，包含与字符像素点数类似的噪声图像。 投影分割经由上述步骤获得的图像， 人工选取包含字符的图像，经过多次实验，得到字符像素长度和高度的大致区间为[7,25],[8,28]。 计算每一列黑像素点的总数，形成竖直投影波形，根据投影波形的过零点确定图像像素区域的边界得到宽度；同理计算每行的黑点数，可得到像素区域高度。将在区间外的类图剔除，最后得到的即为原图中的四个字符图像，由字符最左端的像素位置可确定四个字符在原图中的顺序。 但也可能存在与待识别的字符像素数及长宽都类似的噪声，如下图所示： 特征提取由于以上得到的各个字符大小不尽相同，为统一字符特征，将字符的大小已近邻插值的方式归一化至$28*28$的大小. 将作为实验数据的200个验证码分离出的字符手动分类，得到由24种字符组成的样本库： $$\\Omega = {2,3,4,6,7,8,9,B,C,E,F,G,H,J,K,M,P,Q,R,T,V,W,X,Y}$$ 其中部分字符有不同的字体，部分英文字符有大小写，但不影响识别且为简化识别步骤，故将其分为同一类。 对字符主要提取4*4的粗网格统计特征： 计算每个网格内的像素值占总像素值的比列，将这16个数据作为一组特征向量储存，以二进制储存对应的类别编号。 为提高识别率，增加了边缘特征： 对作图所示的字符使用Canny边缘检测得到字符的边界，如右图所示，统计左图黑点数及右图白点数，将比值作为特征向量的第17个数据加入。 字符识别及结果分析：对单个字符的识别采用 K 近邻(KNN)算法，该方法首先储存训练样本，计算测试样本和每个训练样本特征向量的欧式距离，若在所有的训练样本中，得到与测试样本最接近的的 K 个的样本出现频率最高的类别，则该样本也属于这个类别。多次实验后取K为4。 之前投影分割步骤中提到的出现与待识别字符大小及像素点均类似的噪声，使用KNN计算后得到的与样本最小距离偏较大，多次实验后，得到大致阈值。若KNN步骤中最小 距离大于该值的对象则舍弃，以此去除该类噪声。 另取100张验证码人工标注后以之前的样本库用KNN识别，正确的有92幅，识别率为0.92。出现错误的结果原因基本为字符缺少，应为预处理步骤阈值等需要调整。 已用程序标注好所有一万张验证码。 接下来的工作 校验程序标注的验证码 解决仍存在识别结果错误的问题 用Python重写程序以提高程序效率 st=>start: Start pre=>operation: 预处理 sp=>operation: 字符分割 re=>operation: 字符识别 e=>end st->pre->sp->re->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(document.getElementById(\"flowchart-0-options\").value); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);st=>start: Start a=>operation: 颜色聚类 b=>operation: 噪声处理 c=>operation: 投影分割 d=>operation: 模式识别 e=>end st->a->b->c->d->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(document.getElementById(\"flowchart-1-options\").value); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);","tags":[{"name":"Opencv","slug":"Opencv","permalink":"//limbotech.top/tags/Opencv/"},{"name":"Matlab","slug":"Matlab","permalink":"//limbotech.top/tags/Matlab/"},{"name":"图像处理","slug":"图像处理","permalink":"//limbotech.top/tags/图像处理/"}]},{"title":"Git使用学习笔记","date":"2017-04-16T01:28:07.000Z","path":"2017/04/16/Git使用学习笔记/","text":"大部分内容来自廖雪峰的博客及网络搜索，以在Github上托管代码为目的，使用环境为Windows 10 安装过程略 基本内容在希望进行版本控制的目录下 创建仓库 Copy Code git init 添加文件至暂缓区 Copy Code git add &lt;filename&gt; #添加指定文件 git add . #添加所有变化的文件，但不包括删除的 git add -u #只监控已被add的文件 git add -A #上两个命令的集合 从暂缓区提交至仓库 Copy Code git commit -m &quot;xxx&quot; #引号内为修改备注 git commit #会直接在控制台用vi打开编辑文档，不添加修改信息的话commit会失败！ 查看工作区下修改文件的状态 Copy Code git status #查看是否有文件被修改 git diff &lt;filename&gt; #查看修改内容 版本控制 查看日志 Copy Code git log #查看提交日志 git log --pretty=oneline #仅显示SHA1值和commit信息 版本回退 Copy Code git reset --hard HEAD^ #回退至上一个版本 原理为改变HEAD指针的指向，通过添加^的个数来指向不同的版本，个数较多可写为HEAD~num，也可以用SHA1值的前几位直接指定 查看命令记录 Copy Code git reflog 撤销修改 Copy Code git checkout -- &lt;filename&gt; #只在工作区的修改，未提交至暂存区，可以还原被删除的文件 git reset HEAD &lt;filename&gt; #撤销暂存区的修改，放回工作区，注意没有 --hard参数 应当注意`git reset HEAD &lt;filename&gt;` 指令工作区保留的是add之前对工作区的修改，如果在这之后对文件有修改，执行`git status`能看到有对文件的修改 删除文件 Copy Code git rm &lt;filename&gt; 推送至github远程仓库 添加ssh公钥 在github上创建repo后根据提示在本地已建立好的仓库输入对应指令 Copy Code git remote add origin git@github.com:XXXXXXX/XXX.git 在本地 git commit之后git push origin master #本地master推送至远程origin地址可推送至远程仓库 分支管理 通过创建其他分支，对新的分支的修改不影响原有master分支，新分支工作完成后再合并 创建新分支 Copy Code git checkout -b xxx #创建新分支并切换至该分支 -b参数表示新建 git branch #查看当前分支 合并分支 Copy Code git checkout master git merge xxx ##切换回master分支后将xxx分支的工作合并进来 git branch -d xxx #删除xxx分支，未合并的分支需强制删除，此时使用-D参数 git log --graph #查看分支合并图 git merge --no-ff -m &quot;xxxxx&quot; xxx #--no-ff表示禁用fast forward模式，带此参数可为merge添加commit 工作封存 Copy Code git stash #将当前分支所做的工作储存，恢复到上次commit的状态，此时可任意切换合并分支操作 git stash list #查看 git stash apply xxxx #恢复 git stash drop #删除 git stash pop #上两个命令的综合 查看远程仓库信息 Copy Code git remote -v 标签管理 Copy Code git tag &lt;name&gt; #-d删除 git tag commit_id git tag #查看 git show &lt;tagname&gt; #查看标签信息 git push orign &lt;tagname&gt; #推送标签至远程 git push origin :refs/tags/&lt;tagname&gt; #远程删除标签 忽略文件 目录下创建.gitignore文件，将不需要提交的文件写入并将.gitignore提交即可 git add -f &lt;filename&gt;可强制提交 特殊情况 远程仓库非空，连接本地仓库后不能直接push，可以输入-f参数强制push Copy Code git push origin master -f #warning: 会完全覆盖远程仓库，包括之前的commit ​","tags":[{"name":"git","slug":"git","permalink":"//limbotech.top/tags/git/"}]},{"title":"Windows下Pycharm+Anaconda+Opencv图像处理环境配置","date":"2017-04-14T14:29:59.000Z","path":"2017/04/14/python-opencv/","text":"软件下载略 opencv 的库可以从这里下载： Unofficial Windows Binaries for Python Extension Packages 复制入/lib/site-packages Copy Code pip install *.whl 进行安装 Anaconda是一个成熟的python科学计算发行版，包含很多常用的库，省去了很多麻烦 可以在这里获取licenses，并放入user/.continuum： licenses 有自己的控制台命令 Copy Code conda -h 可以查看帮助 Pycharm是功能强大的python IDE，虽然Anaconda有捆绑Spyder，但这款功能更强","tags":[{"name":"Opencv","slug":"Opencv","permalink":"//limbotech.top/tags/Opencv/"},{"name":"Python","slug":"Python","permalink":"//limbotech.top/tags/Python/"}]},{"title":"Windows下配置Hexo+GitHub博客基本步骤及遇到的问题","date":"2017-04-14T12:48:20.000Z","path":"2017/04/14/Windows下配置Hexo-GitHub博客基本步骤及遇到的问题/","text":"初衷是想找一个成本低廉又能保存一些技术学习笔记的地方，免费的OneNote对代码输入非常不友好，因此想到这样一个折中的搭建个人博客的方法，hexo用于搭建静态博客非常方便，同时能使用markdown编辑文章，而GitHub的门槛也非常低，网上教程也很多，步骤和自己遇到的一些问题如下： 安装Node.js及Git从主页下载即可，配置好git 安装hexo打开终端，输入 Copy Code npm install -g hexo 等待安装完成，无法安装可设置npm代理 Copy Code npm config set registry http://registry.cnpmjs.org 创建Hexo文件夹在预备作为储存博客页面的文件夹内打开终端，依次输入 Copy Code 1. hexo init #会自动创建git repo 2. npm install 查看是否创建成功 Copy Code 1. hexo generate #生成静态页面 2. hexo server #在本地启动 少用，由于路径的原因，会产生各种问题 浏览器输入默认的local:4000端口即可查看页面 创建GitHub repo注意repo名应当为username.github.io否则部署后会有问题 获取SSH密钥并添加打开终端，键入 Copy Code ssh-keygen -t rsa -C &quot;xxx@xx&quot; #后为邮箱地址 在User\\name \\ .ssh\\路径下找到id_rsa.pub 复制密钥，添加入GitHub的setting中即可 测试是否添加成功：打开终端，输入： Copy Code ssh -T git@github.com 成功添加会提示相应字样 Hexo的配置和部署_config.yml为全局配置文件，在Deployment区域，修改为： Copy Code deploy: type: git repo: github: git@github.com:username/username.github.io.git,master 若要关联自己的域名令需添加CNAME文件 终端部署命令： Copy Code hexo clean #清楚缓存 hexo generate hexo deploy 在此之前可能需要输入 Copy Code npm install hexo-deployer-git --save 安装部署插件 至此，基本的配置工作已完成。 Copy Code hexo new &quot;title&quot; 可在source\\ _posts下生成“title”标题的新md文件 由于国内的特殊网络环境，访问已搭建好的页面需要输入https://username.github.io Hexo主题推荐一个主题yilia 也是本站正使用的，Reademe很详细也不再此赘述 绑定个人域名如果你有闲置的域名，可以将其绑定至刚配置好的博客页 在域名管理页的DNS控制中添加域名解析类型为A指向IP地址(在控制台中ping一下搭好的博客地址可以得到)或者添加CNAME指向域名，选择其一即可，不能同时添加 在source目录下添加名为CNAME的文件(无后缀)，内容为你要绑定的域名 修改_config.yml中的url为要绑定的域名，部署即可 关于写作在文章中加入&lt;!-- more --&gt;可以将文章截断显示在主页，防止文章过长 文章头的reward和comments分别为打赏和评论，值为True/False Copy Code hexo new page xxx 可以新建一个名为xxx的页面，以此做了一个留言板 以下是对yilia主题的修改，增加一些功能 跟帖及留言添加评论以及留言的功能，的功能，按照lawlite的方法并没有成功，因此改用来必力的跟帖 从来比力网站获取web代码后，在themes\\yilia\\layout\\ _partial下的article.ejs最后添加即可 例如： Copy Code &lt;% if (!index &amp;&amp; post.comments){ %&gt; &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;XXXXXXXXX&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &#39;function&#39;) { return; } j = d.createElement(s); j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;; j.async = true; e.parentNode.insertBefore(j, e); })(document, &#39;script&#39;); &lt;/script&gt; &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt; &lt;/div&gt; &lt;% } %&gt; 最外层的标签可以取消在主页和控制文章中显示跟帖 网站访问量功能在不蒜子获取代码后放入themes\\yilia\\layout\\ _partial下的footer.ejs中即可 在文章中插入音乐由于是在github上搭建的博客，直接从网易云获取的外链不支持https，从知乎搜索到一个解决办法 Copy Code npm install --save hexo-tag-aplayer 安装播放器插件 在A Flask Music Project. Demo项目中找到音乐链接，修改相应参数即可 例如： Copy Code &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=329 height=100 src=&quot;https://music.daoapp.io/iframe?song=26513177&amp;qssl=1&amp;qlrc=1&amp;autoplay=0&amp;narrow=0&quot;&gt;&lt;/iframe&gt; 效果如下：","tags":[{"name":"git","slug":"git","permalink":"//limbotech.top/tags/git/"},{"name":"blog","slug":"blog","permalink":"//limbotech.top/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"//limbotech.top/tags/hexo/"}]},{"title":"Hello World","date":"2017-04-14T03:24:52.222Z","path":"2017/04/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new postCopy Code $ hexo new &quot;My New Post&quot; More info: Writing Run serverCopy Code $ hexo server More info: Server Generate static filesCopy Code $ hexo generate More info: Generating Deploy to remote sitesCopy Code $ hexo deploy More info: Deployment","tags":[{"name":"Hello world","slug":"Hello-world","permalink":"//limbotech.top/tags/Hello-world/"},{"name":"随笔","slug":"随笔","permalink":"//limbotech.top/tags/随笔/"}]}]