[{"title":"前端学习week1","date":"2019-05-04T01:05:18.000Z","path":"2019/05/04/前端学习week1/","text":"一些前端的基本概念，没什么卵用 基础知识#[TOC] 浏览器#常见浏览器内核 webkit blink gecko trigent 二进制# 模拟信号 连续的信号 数字信号 离散的信号 图片格式# jpg，jpeg 有损压缩，压缩率高 照片 png (portable network graphic) 无损压缩 适合有大块相同颜色区域的图像，不适合照片 支持透明(Alpha通道) gif 只有256色(原图小于256色时是无损压缩) 支持透明，但只支持全透明和不透明 bmp 无压缩，无损 多种颜色数量的格式 体积大，不适合网页 psd Photoshop专用格式 webp google开发的格式 有损压缩 各方面强过jpg 适合移动端 命令行# GUI与CLI GUI - Graphics User Interface CLI - Command Line Interface 两者区别只在于形式不一样 概念 prompt 命令 提示符 裸命令 例：pwd 显示当前工作目录 pipe 管道符，将前一个命令的Output作为下一个命令的Input 例如：xxx | grep abc 过滤出含abc的输出结果 编码知识# ASCII表 记忆：10-换行 48-0 65-A 97-a Unicode 通用字符集 utf-8 针对Unicode的一种变长字符编码 HTML#hypertext mark language ###嵌套规则 树状(递归)结构 ###标签 语义化 secmentic 语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。 即：合适的内容用合适的标签 事实上，即使是有些非自闭合标签（如p，li），在一些情况下也是可以省略结束标签的，而且，是完全符合html标准的 参考 https://www.w3.org/TR/html-markup/p.html https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories ###缩进 indent ###属性 属性名大小写不敏感，属性值大小写敏感 当属性值没有空格和引号等特殊字符时，属性值完全可以不用引号包围 当属性值有复杂的引号时，考虑转义字符 一些通用/全局属性(Global Attributes) id name 标签名，主要用再表单类标签 title style 给标签内指定内联样式 class data-* html5中新属性，储存页面的私有自定义数据，会被用户代理自动忽略 例： Copy Code1&lt;li data-animal-type=\"鸟类\"&gt;喜鹊&lt;/li&gt; ###html entity 字符实体 输入符号时，可能会与标签混在一起 两种转义(escape)格式 &entityName; &#entityNumber; 参考 https://dev.w3.org/html5/html-author/charref http://www.w3school.com.cn/html/html_entities.asp http://www.w3school.com.cn/tags/html_ref_entities.html 空白字符忽略 用户代理默认忽略文字间多余一个的空格，换行符全部忽略 可以用css改变忽略 可以用字符实体让空格不被忽略 例如&amp;nbsp;，但这不是真正的空格 ###常用标签 html 只能有一个 head https://github.com/joshbuchea/HEAD head内的内容不会显示在页面上 meta 元信息 title标签 仅纯文本 如果不出现在head内会自动移到head 出现多个的话仅第一个生效 页面图标 也可以不用一个标签设置，浏览器会自动读取网站根目录下的favicon.ico这个文件 body 如果在body或者html标签的结束标签之后又出现了其它的标签，则之前的结束标签就会被认为无效，浏览器会自动添加结束标签 base 基准 在标签之前加载的标签不会使用这个基准地址 ‘‘ 必须以/即目录结尾，否则会把最后一个/的位置作为基准路径 target属性 _blank 新标签 _self 默认值 _parent 父窗体显示 _top 顶层窗体显示 h1-h6 一般页面不超过一个h1 seo (Search Engine Optimism) p a 语义是一个链接 绝对路径 相对路径 空的href连接到当前页面 类似的，img标签的空src属性也连接到当前页面 https://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/ download 属性 html5 表示点击链接将下载链接对应文件，而不是跳转，下载的文件以download属性的值来命名 只能下载自己网站的资源 这个属性能让点击下载完全由前端实现 img alt属性 alternate span 和 div 通用标签，是没有语义的标签 Git使用#常用命令： git config git init 初始化本地仓库 git status 当前仓库状态 -s紧凑显示 git add xx 将修改/新文件提交到stage区 git commit -m “提交信息” 提交暂存区文件 git diff 显示详细文件修改状态，-staged显示暂存区文件改动 git log git merge git clone [url] git clone https://github.com/libgit2/libgit2 mylibgit 可将本地仓库名改为mylibgit git remote git push/pull git fetch git checkout git branch https://.github.io/可以访问到.github.io这个仓库里的资源 https://.github.io/&lt;repo_name&gt;可以访问到repo_name这个仓库里的资源","tags":[{"name":"font-end","slug":"font-end","permalink":"limbotech.top/tags/font-end/"}]},{"title":"搭建RSS自动推送服务","date":"2018-03-25T12:07:33.000Z","path":"2018/03/25/搭建RSS自动推送服务/","text":"利用Google app engine搭建自动推送RSS至kindle的服务 原repo：KindleEar 因为网络环境原因一直没有成功。心灰意冷下看到这篇文章： KindleEar 搭建教程：推送 RSS 订阅到 Kindle 记录非常详细，几乎涵盖了所有问题，故转载","tags":[{"name":"kindle","slug":"kindle","permalink":"limbotech.top/tags/kindle/"},{"name":"rss","slug":"rss","permalink":"limbotech.top/tags/rss/"}]},{"title":"win10下配置st3+Texlive+sumartraPDF的LaTeX环境","date":"2017-05-11T02:24:42.000Z","path":"2017/05/11/win10下配置st3-Texlive-sumartraPDF的LaTeX环境/","text":"安装#sublime配置方便而Tex live相较Ctex更灵活且自定义程度高 sumatraPDF可配置为默认的pdf预览器，并内置了反向查找的功能，具体步骤略。 配置# 在sublime中安装好LaTeXtools插件后，找出配置文件LaTeXTools.sublime-settings 将Tex live和sumatraPDF的安装路径添加环境变量后，找的settings中的texpath，distro和sumatra项按照提示修改，再找到builder项改为simple，即配置完成。 反向代理：打开sumartaPDf，在选项的对应处输入&quot;C:\\Program Files\\Sublime Text 3\\sublime_text.exe&quot; &quot;%f:%l&quot; 并执行即可。 在编辑完文档后按ctrl+b即可保存并输出pdf。","tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"limbotech.top/tags/LaTeX/"},{"name":"sublime","slug":"sublime","permalink":"limbotech.top/tags/sublime/"}]},{"title":"Qt学习笔记","date":"2017-05-09T17:29:44.000Z","path":"2017/05/10/Qt学习笔记/","text":"想做一个GUI对验证码识别程序做同意的处理，又开了个新坑，并没有任何Qt的基础，Python相对C++比较简单，因此使用PyQt来做，本文为快速制作一个简陋的GUI程序的学习过程。 配置环境#参见另一文中的末尾Windows下Pycharm+Anaconda+Opencv图像处理环境配置 设计过程#可以参考另一系列教程PyQt5学习笔记01—-第一个窗口已经写的非常详细了 设计结果： 下面说说自己0基础学习时的问题： 由QT Designer设计好的UI执行Pyuic生成的ui代码会覆盖之前的，所以我们需要创建一个新的主程序通过调用UI程序来实现代码与界面分离，在主程序中添加功能。 主程序中新建一个类例如： Copy Code1234class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow): def __init__(self): super(recognizer, self).__init__() self.setupUi(self) 其中def __init__(self)为窗口初始化的部分，信号连接，字体等设置放在这里面 自定义的槽函数也放置在class中 调用label来显示文字及图像信息 Copy Code1self.label.XXXXXXXXX 可以设置全局变量来记录之前打开的文件路径，程序结果等。 使用cxfreeze来打包生成可执行文件(to be continued) cxfreeze打包会生成很多库文件，不方便使用，可用pyinstaller打包成单一可执行文件","tags":[{"name":"PyQt","slug":"PyQt","permalink":"limbotech.top/tags/PyQt/"},{"name":"python","slug":"python","permalink":"limbotech.top/tags/python/"}]},{"title":"python+opencv学习笔记","date":"2017-04-18T22:19:04.000Z","path":"2017/04/19/python-opencv学习笔记/","text":"记录学习过程中的一些疑问 1cv.imread() 有两个参数：第一个参数为要读入的图片文件名，第二个参数为如何读取图片，包括cv2.IMREAD_COLOR：读入一副彩色图片；cv2.IMREAD_GRAYSCALE：以灰度模式读入图片；cv2.IMREAD_UNCHANGED：读入一幅图片，并包括其alpha通道。默认第二个参数不填。 在Opencv下加载的图像是BGR格式，而在Matplotlib中是RGB格式","tags":[{"name":"Python","slug":"Python","permalink":"limbotech.top/tags/Python/"},{"name":"Opencv","slug":"Opencv","permalink":"limbotech.top/tags/Opencv/"}]},{"title":"验证码识别研究","date":"2017-04-18T15:08:35.000Z","path":"2017/04/18/验证码识别技术研究/","text":"研究背景#验证码(CAPTCHA) 最早作为卡内基梅隆大学的一个科研项目，Yahoo! 是CAPTCHA 的第一个用户。CAPTCHA 是“Completely Automated Public Turing test to tell Computers and Humans Apart”(全自动区分计算机和人类的图灵测试)的缩写，是一种区分用户是人类还是计算机的公共自动程序。在一个验证码测试中，由计算机生成一个问题并评判用户的答案，这个问题必须只有人类才能解答。由于计算机无法解答，回答出该问题的用户就会被认为是人类 。CAPTCHA 在网络上的大规模使用起源于 1999-2000 年 Yahoo 网站的账号注册。目前大部分网站都引入了验证码机制来加强网络的安全验证。通过对验证码识别的研究，能够及时发现验证码存在的安全漏洞，对设计出更加安全的验证码有参考价值，对图像处理，模式识别等相关领域也具有重要意义。 验证码识别的具体过程#识别流程一般为： 本课题主要介绍验证码识别中常用的数字图像处理技术，研究对象为卡提诺社区的验证码，给出算法流程和识别结果，并对结果进行分析。 验证码示例及特点：#从原网页下载了一万张待标注的验证码： 由观察可得此类验证码的特点： 每幅验证码字符由4位数字和英文字母组成，且字体种类不多 每个字符的颜色与背景的噪声颜色都不相同 字符没有粘连，便于字符分割 由以上特点设计的识别流程如下： 识别流程#根据设计好的识别方案，从之前下载的验证码中选取了200张作为实验数据及模式识别的样本，具体流程如下: 颜色聚类#验证码图像中字符间颜色不同且均匀，可通过颜色聚类的方法将字符分离。 主要使用K-means算法，原理： 从数据集合中选取K个点作为各簇的中心，计算集合中各元素到各簇心的距离，使距离最近的元素为一类，再计算各类的中心作为新的簇心，重复上述过程，直到簇心的位置不变。 将获取的RGB图换值LAB空间，由于LAB空间色域广且各分量间联系较小，更适合颜色聚类。 RGB原图： LAB空间： 将图像每个像素值的L,A,B三个分量为一组作为特征向量，用K-means进行颜色聚类，由于背景的噪声颜色较复杂，因此K值取的较大，取K = 40。 颜色聚类后(已按类标记)： 类图处理#由于颜色聚类后得到的矩阵是对原图不同类的标记，因此将每一类的标记点置黑，其他点置白，可以得到K张类图，其中4张包含字符的类图，(K - 4)张包含各类的颜色的噪声图，省去了预处理中灰度化的步骤。 因为K张类图都有一定数量的像素数，且背景噪声中可能包含与待识别字符颜色相同的零星噪点，难以直接获得包含字符的类图。通过人工挑选出包含字符的类图，经过多次实验，字符的像素点数量大致在[70,500]区间。 对之前的K张类图做4邻域的连通域去噪，步骤： 扫描整张图像，将不同4邻域的连通域标记为不同数字，统计各连通域的像素点数，将小于70或大于500的连通域置白。 处理后得到的各类图像种类：空白的噪声图像，只包含字符的图像，包含与字符像素点数类似的噪声图像。 投影分割#经由上述步骤获得的图像， 人工选取包含字符的图像，经过多次实验，得到字符像素长度和高度的大致区间为[7,25],[8,28]。 计算每一列黑像素点的总数，形成竖直投影波形，根据投影波形的过零点确定图像像素区域的边界得到宽度；同理计算每行的黑点数，可得到像素区域高度。将在区间外的类图剔除，最后得到的即为原图中的四个字符图像，由字符最左端的像素位置可确定四个字符在原图中的顺序。 但也可能存在与待识别的字符像素数及长宽都类似的噪声，如下图所示： 特征提取#由于以上得到的各个字符大小不尽相同，为统一字符特征，将字符的大小已近邻插值的方式归一化至$28*28$的大小. 将作为实验数据的200个验证码分离出的字符手动分类，得到由24种字符组成的样本库： $$\\Omega = {2,3,4,6,7,8,9,B,C,E,F,G,H,J,K,M,P,Q,R,T,V,W,X,Y}$$ 其中部分字符有不同的字体，部分英文字符有大小写，但不影响识别且为简化识别步骤，故将其分为同一类。 对字符主要提取4*4的粗网格统计特征： 计算每个网格内的像素值占总像素值的比列，将这16个数据作为一组特征向量储存，以二进制储存对应的类别编号。 为提高识别率，增加了边缘特征： 对作图所示的字符使用Canny边缘检测得到字符的边界，如右图所示，统计左图黑点数及右图白点数，将比值作为特征向量的第17个数据加入。 字符识别及结果分析：#对单个字符的识别采用 K 近邻(KNN)算法，该方法首先储存训练样本，计算测试样本和每个训练样本特征向量的欧式距离，若在所有的训练样本中，得到与测试样本最接近的的 K 个的样本出现频率最高的类别，则该样本也属于这个类别。多次实验后取K为4。 之前投影分割步骤中提到的出现与待识别字符大小及像素点均类似的噪声，使用KNN计算后得到的与样本最小距离偏较大，多次实验后，得到大致阈值。若KNN步骤中最小 距离大于该值的对象则舍弃，以此去除该类噪声。 另取100张验证码人工标注后以之前的样本库用KNN识别，正确的有92幅，识别率为0.92。出现错误的结果原因基本为字符缺少，应为预处理步骤阈值等需要调整。 已用程序标注好所有一万张验证码。 接下来的工作# 校验程序标注的验证码 解决仍存在识别结果错误的问题 用Python重写程序以提高程序效率 st=>start: Start pre=>operation: 预处理 sp=>operation: 字符分割 re=>operation: 字符识别 e=>end st->pre->sp->re->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);st=>start: Start a=>operation: 颜色聚类 b=>operation: 噪声处理 c=>operation: 投影分割 d=>operation: 模式识别 e=>end st->a->b->c->d->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);","tags":[{"name":"Opencv","slug":"Opencv","permalink":"limbotech.top/tags/Opencv/"},{"name":"Matlab","slug":"Matlab","permalink":"limbotech.top/tags/Matlab/"},{"name":"图像处理","slug":"图像处理","permalink":"limbotech.top/tags/图像处理/"}]},{"title":"Windows下Pycharm+Anaconda+Opencv图像处理环境配置","date":"2017-04-14T14:29:59.000Z","path":"2017/04/14/python-opencv/","text":"软件下载略 opencv 的库可以从这里下载： Unofficial Windows Binaries for Python Extension Packages 复制入/lib/site-packages Copy Code1pip install *.whl 进行安装 Anaconda是一个成熟的python科学计算发行版，包含很多常用的库，省去了很多麻烦 可以在这里获取licenses，并放入user/.continuum： licenses 有自己的控制台命令 Copy Code1conda -h 可以查看帮助 Pycharm是功能强大的python IDE，虽然Anaconda有捆绑Spyder，但这款功能更强 PyQt5的配置#由于需要编写GUI，与设计数据库的方式很类似，配置可参考Python3 PyQt5 pycharm 环境搭建 在from PyQt5 import 包时报错，原因是Python3.6(Anaconda)目录下缺少python3.dll文件，从官网下载embeddable包复制即可，参考python3.6.0(Anaconda)安装PyQt5，“DLL load failed: 找不到指定的模块 需要调用资源配置在pyrcc中配置，与配置pyuic类似，pyrcc5.exe文件再anaconda/scripts目录下","tags":[{"name":"PyQt","slug":"PyQt","permalink":"limbotech.top/tags/PyQt/"},{"name":"Python","slug":"Python","permalink":"limbotech.top/tags/Python/"},{"name":"Opencv","slug":"Opencv","permalink":"limbotech.top/tags/Opencv/"}]},{"title":"Windows下配置Hexo+GitHub博客基本步骤及遇到的问题","date":"2017-04-14T12:48:20.000Z","path":"2017/04/14/Windows下配置Hexo-GitHub博客基本步骤及遇到的问题/","text":"初衷是想找一个成本低廉又能保存一些技术学习笔记的地方，免费的OneNote对代码输入非常不友好，因此想到这样一个折中的搭建个人博客的方法，hexo用于搭建静态博客非常方便，同时能使用markdown编辑文章，而GitHub的门槛也非常低，网上教程也很多，步骤和自己遇到的一些问题如下： 安装Node.js及Git#从主页下载即可，配置好git 安装hexo#打开终端，输入 Copy Code1npm install -g hexo 等待安装完成，无法安装可设置npm代理 Copy Code1npm config set registry http://registry.cnpmjs.org 创建Hexo文件夹#在预备作为储存博客页面的文件夹内打开终端，依次输入 Copy Code121. hexo init #会自动创建git repo2. npm install 查看是否创建成功 Copy Code121. hexo generate #生成静态页面2. hexo server #在本地启动 少用，由于路径的原因，会产生各种问题 浏览器输入默认的local:4000端口即可查看页面 创建GitHub repo#注意repo名应当为username.github.io否则部署后会有问题 获取SSH密钥并添加#打开终端，键入 Copy Code1ssh-keygen -t rsa -C \"xxx@xx\" #后为github账号注册时的邮箱地址 在User\\name \\ .ssh\\路径下找到id_rsa.pub 复制密钥，添加入GitHub的setting中即可 测试是否添加成功：打开终端，输入： Copy Code1ssh -T git@github.com 成功添加会提示相应字样 ps：代理等原因会影响连接，例如 Copy Code1234567891011121314151617181920212223$ ssh -vT git@github.comOpenSSH_7.3p1, OpenSSL 1.0.2k 26 Jan 2017debug1: Reading configuration data /etc/ssh/ssh_configdebug1: Connecting to github.com [93.46.8.89] port 22.debug1: Connection established.debug1: identity file /c/Users/Limbo/.ssh/id_rsa type 1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_rsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_dsa type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_dsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ecdsa type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ecdsa-cert type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ed25519 type -1debug1: key_load_public: No such file or directorydebug1: identity file /c/Users/Limbo/.ssh/id_ed25519-cert type -1debug1: Enabling compatibility mode for protocol 2.0debug1: Local version string SSH-2.0-OpenSSH_7.3ssh_exchange_identification: Connection closed by remote host 关闭代理即可 Hexo的配置和部署#_config.yml为全局配置文件，在Deployment区域，修改为： Copy Code1234deploy: type: git repo: github: git@github.com:username/username.github.io.git,master 若要关联自己的域名令需添加CNAME文件 终端部署命令： Copy Code123hexo clean #清楚缓存hexo generatehexo deploy 在此之前可能需要输入 Copy Code1npm install hexo-deployer-git --save 安装部署插件 至此，基本的配置工作已完成。 Copy Code1hexo new \"title\" 可在source\\ _posts下生成“title”标题的新md文件 由于国内的特殊网络环境，访问已搭建好的页面需要输入https://username.github.io Hexo主题#推荐一个主题yilia 也是本站正使用的，Reademe很详细也不再此赘述 绑定个人域名#如果你有闲置的域名，可以将其绑定至刚配置好的博客页 在域名管理页的DNS控制中添加域名解析类型为A指向IP地址(在控制台中ping一下搭好的博客地址可以得到)或者添加CNAME指向域名，选择其一即可，不能同时添加 在source目录下添加名为CNAME的文件(无后缀)，内容为你要绑定的域名 修改_config.yml中的url为要绑定的域名，部署即可 关于写作#在文章中加入&lt;!-- more --&gt;可以将文章截断显示在主页，防止文章过长 文章头的reward和comments分别为打赏和评论，值为True/False Copy Code1hexo new page xxx 可以新建一个名为xxx的页面，以此做了一个留言板 以下是对yilia主题的修改，增加一些功能 跟帖及留言#添加评论以及留言的功能，的功能，按照lawlite的方法并没有成功，因此改用来必力的跟帖 从来比力网站获取web代码后，在themes\\yilia\\layout\\ _partial下的article.ejs最后添加即可 例如： Copy Code123456789101112131415161718&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;&lt;div id=\"lv-container\" data-id=\"city\" data-uid=\"XXXXXXXXX\"&gt; &lt;script type=\"text/javascript\"&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === 'function') &#123; return; &#125; j = d.createElement(s); j.src = 'https://cdn-city.livere.com/js/embed.dist.js'; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, 'script'); &lt;/script&gt;&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;&lt;/div&gt;&lt;% &#125; %&gt; 最外层的标签可以取消在主页和控制文章中显示跟帖 网站访问量功能#在不蒜子获取代码后放入themes\\yilia\\layout\\ _partial下的footer.ejs中即可 在文章中插入音乐#由于是在github上搭建的博客，直接从网易云获取的外链不支持https，从知乎搜索到一个解决办法 Copy Code1npm install --save hexo-tag-aplayer 安装播放器插件 在A Flask Music Project. Demo项目中找到音乐链接，修改相应参数即可 在网易云音乐中找到对应曲目，然后生成外链。 代码如下： Copy Code1&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=100 src=\"https://music.163.com/outchain/player?type=2&amp;id=26513177&amp;auto=0\"&gt;&lt;/iframe&gt; 效果如下：","tags":[{"name":"blog","slug":"blog","permalink":"limbotech.top/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"limbotech.top/tags/hexo/"},{"name":"git","slug":"git","permalink":"limbotech.top/tags/git/"}]},{"title":"Hello World","date":"2017-04-14T03:24:52.222Z","path":"2017/04/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start#Create a new post#Copy Code1$ hexo new \"My New Post\" More info: Writing Run server#Copy Code1$ hexo server More info: Server Generate static files#Copy Code1$ hexo generate More info: Generating Deploy to remote sites#Copy Code1$ hexo deploy More info: Deployment","tags":[{"name":"Hello world","slug":"Hello-world","permalink":"limbotech.top/tags/Hello-world/"},{"name":"随笔","slug":"随笔","permalink":"limbotech.top/tags/随笔/"}]}]